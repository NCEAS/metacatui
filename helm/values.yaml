## Default values for metacatui.
## This is a YAML-formatted file.
## Edit values, then install and/or upgrade using:
##
## $  helm upgrade --install releasename -n mynamespace ./relative/path/to/helm/directory
##

global:
  ## @param global.metacatExternalBaseUrl metacat base url, accessible from outside the cluster.
  ## Include protocol and trailing slash, but not the context; e.g.: "https://test.arcticdata.io/"
  ##
  metacatExternalBaseUrl: "https://localhost/"

  ## @param global.metacatAppContext The directory that metacat is installed in at the `baseUrl`.
  ## Used to populate metacatui's 'metacatContext'.
  ## For example, if you have metacat installed in $TOMCAT/webapps/knb, then this should be set
  ## to "knb". If you are using the default metacat settings, it should be 'metacat'
  ##
  metacatAppContext: "metacat"

  ## @param global.d1ClientCnUrl the url of the CN. Used to determine metacatui's 'd1CNBaseUrl'
  ## NOTE: only the base URL is used to populate d1CNBaseUrl; anything after the third "/" will be
  ## ignored - e.g. if you set d1ClientCnUrl: "https://cn.dataone.org/cn", then d1CNBaseUrl will
  ## be set to "https://cn.dataone.org/"
  ##
  d1ClientCnUrl: "https://cn.dataone.org/cn"


## appConfig contains the MetacatUI.AppConfig settings that can be overridden.
##
## Optional configuration. Note you can define any attributes here, to override those that would
## normally appear in config.js. See full listing in AppModel.js:
## https://github.com/NCEAS/metacatui/blob/main/src/js/models/AppModel.js
##
## * * * IMPORTANT NOTE:  * * * DO NOT SET THE FOLLOWING VALUES IN THIS SECTION! * * *
## They will be ignored here, because they are populated from the "global" section, above:
## * baseUrl:         uses '.Values.global.metacatExternalBaseUrl'
## * d1CNBaseUrl:     uses base URL portion of '.Values.global.d1ClientCnUrl'
##                      - see above for details
## * metacatContext:  uses '.Values.global.metacatAppContext'
##
appConfig:
  ## @param appConfig.enabled Define override values in MetacatUI.AppConfig
  ## Since we generally want to avoid loading 2 different config.js files, this would typically be
  ## set to "false" for production deployments, and "true" only for development & test environments.
  ##
  enabled: true

  ## @param appConfig.root The url root to be appended after the metacatui baseUrl.
  ##
  root: "/"

  ## @param appConfig.theme Corresponds to the name of a directory in src/js/themes/.
  ## Uses the 'default' theme if not set
  ##
  theme: "knb"

## Probes
##
#livenessProbe:
#  httpGet:
#    path: /
#    port: http
#readinessProbe:
#  httpGet:
#    path: /
#    port: http

service:
  type: ClusterIP
  port: 80

## @param ingress typically disabled here (enabled: false) and handled by metacat helm chart.
## Example settings below for local dev
##
ingress:
  enabled: false
  className: traefik # enable in rancher desktop
  annotations:
    kubernetes.io/ingress.class: traefik
  hosts:
    - host: myMacbookPro.local # example hostname of local machine
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: mcui-metacatui  # Assumes the service is exposed in the 'mcui' namespace
            port:
              number: 80
  tls: []


## @param source  The source from which to retrieve the metacatui code. NOTE: Changes should not be
## needed here, unless you wish to deviate from the official metacatui release version defined in
## the helm chart (see Chart.yaml)
##
source:
  ## @param source.from  Options are "package" (the default), "git", or "pvc"
  ## * "package" will download a release package from the metacatui git repository, unzip it, and
  ##    install the files in local pod storage (emptyDir{})
  ## * "git" will clone a specific branch or tag from the metacatui git repository, and install the
  ##    files in local pod storage (emptyDir{})
  ## * "pvc" expects to find a pre-configured PVC containing the files to be used. Note you will
  ##    need to provide values for a pre-configured PVC in 'volumes', below
  ##
  from: package

  ## @param source.package (default): Download the official release version defined in Chart.yaml
  ## Note these settings ignored unless 'source.from:' is set to 'package'
  ## example:
  ##    source.from: package
  ##    source.package.location: "https://github.com/NCEAS/metacatui/archive"
  ##    source.package.version: "2.26.0"
  ## ...will download:   https://github.com/NCEAS/metacatui/archive/2.26.0.zip
  ##
  package:
    ## @param source.package.location The remote location where the release zipfile is hosted
    ##
    location: "https://github.com/NCEAS/metacatui/archive"

    ## source.package.version override the release version defined in Chart.yaml
    ## Assumes release is a zipfile named <version>.zip
    ## LEAVE COMMENTED UNLESS YOU NEED TO OVERRIDE THE CHART SETTING!
  #    version: "2.29.1"

  ## @param source.git clone a specific branch or tag from the metacatui git repository, and install
  ## the files in local pod storage (emptyDir{})
  ## Note these settings ignored unless 'source.from:' is set to 'git'
  ##
  git:
    ## @param source.git.repoUrl the https url of the repo to be cloned
    repoUrl: "https://github.com/NCEAS/metacatui.git"

    ## @param source.git.revision Any string that makes sense after the command `git checkout`...
    ## - for example:
    ##     revision: "tags/2.29.0"    =>     git checkout tags/2.29.0
    ##     revision: "develop"        =>     git checkout develop
    ##
    revision: "develop"

## volumes: Uncomment and provide values if you want to use a pre-configured PVC instead of doing a
## git checkout
## Note these settings ignored unless 'source.from:' is set to 'pvc'
##
#volumes:
#  ## volumes.name substitute your own release name, but do NOT change the '-mcui-source-files' part
#  - name: <Your-Release-Name>-mcui-source-files
#    persistentVolumeClaim:
#      claimName: <Your-Pre-Configured-pvc>

replicaCount: 1

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80

nodeSelector: {}
tolerations: []
affinity: {}

image: {}
imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""
serviceAccount: {}
podAnnotations: {}
podLabels: {}
podSecurityContext: {}
securityContext: {}
resources: {}
