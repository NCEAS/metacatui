{"version":3,"file":"index.js","sources":["../src/plotty/colorscales.ts","../src/plotty/arithmetics-parser.js","../src/plotty/index.ts","../src/helpers/utils.ts","../src/TIFFImageryProviderTilingScheme.ts","../src/helpers/reprojection.ts","../src/helpers/generateImage.ts","../src/TIFFImageryProvider.ts"],"sourcesContent":["export const colorscales = {\r\n    viridis: new Uint8Array([68,1,84,255,68,2,86,255,69,4,87,255,69,5,89,255,70,7,90,255,70,8,92,255,70,10,93,255,70,11,94,255,71,13,96,255,71,14,97,255,71,16,99,255,71,17,100,255,71,19,101,255,72,20,103,255,72,22,104,255,72,23,105,255,72,24,106,255,72,26,108,255,72,27,109,255,72,28,110,255,72,29,111,255,72,31,112,255,72,32,113,255,72,33,115,255,72,35,116,255,72,36,117,255,72,37,118,255,72,38,119,255,72,40,120,255,72,41,121,255,71,42,122,255,71,44,122,255,71,45,123,255,71,46,124,255,71,47,125,255,70,48,126,255,70,50,126,255,70,51,127,255,70,52,128,255,69,53,129,255,69,55,129,255,69,56,130,255,68,57,131,255,68,58,131,255,68,59,132,255,67,61,132,255,67,62,133,255,66,63,133,255,66,64,134,255,66,65,134,255,65,66,135,255,65,68,135,255,64,69,136,255,64,70,136,255,63,71,136,255,63,72,137,255,62,73,137,255,62,74,137,255,62,76,138,255,61,77,138,255,61,78,138,255,60,79,138,255,60,80,139,255,59,81,139,255,59,82,139,255,58,83,139,255,58,84,140,255,57,85,140,255,57,86,140,255,56,88,140,255,56,89,140,255,55,90,140,255,55,91,141,255,54,92,141,255,54,93,141,255,53,94,141,255,53,95,141,255,52,96,141,255,52,97,141,255,51,98,141,255,51,99,141,255,50,100,142,255,50,101,142,255,49,102,142,255,49,103,142,255,49,104,142,255,48,105,142,255,48,106,142,255,47,107,142,255,47,108,142,255,46,109,142,255,46,110,142,255,46,111,142,255,45,112,142,255,45,113,142,255,44,113,142,255,44,114,142,255,44,115,142,255,43,116,142,255,43,117,142,255,42,118,142,255,42,119,142,255,42,120,142,255,41,121,142,255,41,122,142,255,41,123,142,255,40,124,142,255,40,125,142,255,39,126,142,255,39,127,142,255,39,128,142,255,38,129,142,255,38,130,142,255,38,130,142,255,37,131,142,255,37,132,142,255,37,133,142,255,36,134,142,255,36,135,142,255,35,136,142,255,35,137,142,255,35,138,141,255,34,139,141,255,34,140,141,255,34,141,141,255,33,142,141,255,33,143,141,255,33,144,141,255,33,145,140,255,32,146,140,255,32,146,140,255,32,147,140,255,31,148,140,255,31,149,139,255,31,150,139,255,31,151,139,255,31,152,139,255,31,153,138,255,31,154,138,255,30,155,138,255,30,156,137,255,30,157,137,255,31,158,137,255,31,159,136,255,31,160,136,255,31,161,136,255,31,161,135,255,31,162,135,255,32,163,134,255,32,164,134,255,33,165,133,255,33,166,133,255,34,167,133,255,34,168,132,255,35,169,131,255,36,170,131,255,37,171,130,255,37,172,130,255,38,173,129,255,39,173,129,255,40,174,128,255,41,175,127,255,42,176,127,255,44,177,126,255,45,178,125,255,46,179,124,255,47,180,124,255,49,181,123,255,50,182,122,255,52,182,121,255,53,183,121,255,55,184,120,255,56,185,119,255,58,186,118,255,59,187,117,255,61,188,116,255,63,188,115,255,64,189,114,255,66,190,113,255,68,191,112,255,70,192,111,255,72,193,110,255,74,193,109,255,76,194,108,255,78,195,107,255,80,196,106,255,82,197,105,255,84,197,104,255,86,198,103,255,88,199,101,255,90,200,100,255,92,200,99,255,94,201,98,255,96,202,96,255,99,203,95,255,101,203,94,255,103,204,92,255,105,205,91,255,108,205,90,255,110,206,88,255,112,207,87,255,115,208,86,255,117,208,84,255,119,209,83,255,122,209,81,255,124,210,80,255,127,211,78,255,129,211,77,255,132,212,75,255,134,213,73,255,137,213,72,255,139,214,70,255,142,214,69,255,144,215,67,255,147,215,65,255,149,216,64,255,152,216,62,255,155,217,60,255,157,217,59,255,160,218,57,255,162,218,55,255,165,219,54,255,168,219,52,255,170,220,50,255,173,220,48,255,176,221,47,255,178,221,45,255,181,222,43,255,184,222,41,255,186,222,40,255,189,223,38,255,192,223,37,255,194,223,35,255,197,224,33,255,200,224,32,255,202,225,31,255,205,225,29,255,208,225,28,255,210,226,27,255,213,226,26,255,216,226,25,255,218,227,25,255,221,227,24,255,223,227,24,255,226,228,24,255,229,228,25,255,231,228,25,255,234,229,26,255,236,229,27,255,239,229,28,255,241,229,29,255,244,230,30,255,246,230,32,255,248,230,33,255,251,231,35,255,253,231,37,255]),\r\n    inferno: new Uint8Array([0,0,4,255,1,0,5,255,1,1,6,255,1,1,8,255,2,1,10,255,2,2,12,255,2,2,14,255,3,2,16,255,4,3,18,255,4,3,20,255,5,4,23,255,6,4,25,255,7,5,27,255,8,5,29,255,9,6,31,255,10,7,34,255,11,7,36,255,12,8,38,255,13,8,41,255,14,9,43,255,16,9,45,255,17,10,48,255,18,10,50,255,20,11,52,255,21,11,55,255,22,11,57,255,24,12,60,255,25,12,62,255,27,12,65,255,28,12,67,255,30,12,69,255,31,12,72,255,33,12,74,255,35,12,76,255,36,12,79,255,38,12,81,255,40,11,83,255,41,11,85,255,43,11,87,255,45,11,89,255,47,10,91,255,49,10,92,255,50,10,94,255,52,10,95,255,54,9,97,255,56,9,98,255,57,9,99,255,59,9,100,255,61,9,101,255,62,9,102,255,64,10,103,255,66,10,104,255,68,10,104,255,69,10,105,255,71,11,106,255,73,11,106,255,74,12,107,255,76,12,107,255,77,13,108,255,79,13,108,255,81,14,108,255,82,14,109,255,84,15,109,255,85,15,109,255,87,16,110,255,89,16,110,255,90,17,110,255,92,18,110,255,93,18,110,255,95,19,110,255,97,19,110,255,98,20,110,255,100,21,110,255,101,21,110,255,103,22,110,255,105,22,110,255,106,23,110,255,108,24,110,255,109,24,110,255,111,25,110,255,113,25,110,255,114,26,110,255,116,26,110,255,117,27,110,255,119,28,109,255,120,28,109,255,122,29,109,255,124,29,109,255,125,30,109,255,127,30,108,255,128,31,108,255,130,32,108,255,132,32,107,255,133,33,107,255,135,33,107,255,136,34,106,255,138,34,106,255,140,35,105,255,141,35,105,255,143,36,105,255,144,37,104,255,146,37,104,255,147,38,103,255,149,38,103,255,151,39,102,255,152,39,102,255,154,40,101,255,155,41,100,255,157,41,100,255,159,42,99,255,160,42,99,255,162,43,98,255,163,44,97,255,165,44,96,255,166,45,96,255,168,46,95,255,169,46,94,255,171,47,94,255,173,48,93,255,174,48,92,255,176,49,91,255,177,50,90,255,179,50,90,255,180,51,89,255,182,52,88,255,183,53,87,255,185,53,86,255,186,54,85,255,188,55,84,255,189,56,83,255,191,57,82,255,192,58,81,255,193,58,80,255,195,59,79,255,196,60,78,255,198,61,77,255,199,62,76,255,200,63,75,255,202,64,74,255,203,65,73,255,204,66,72,255,206,67,71,255,207,68,70,255,208,69,69,255,210,70,68,255,211,71,67,255,212,72,66,255,213,74,65,255,215,75,63,255,216,76,62,255,217,77,61,255,218,78,60,255,219,80,59,255,221,81,58,255,222,82,56,255,223,83,55,255,224,85,54,255,225,86,53,255,226,87,52,255,227,89,51,255,228,90,49,255,229,92,48,255,230,93,47,255,231,94,46,255,232,96,45,255,233,97,43,255,234,99,42,255,235,100,41,255,235,102,40,255,236,103,38,255,237,105,37,255,238,106,36,255,239,108,35,255,239,110,33,255,240,111,32,255,241,113,31,255,241,115,29,255,242,116,28,255,243,118,27,255,243,120,25,255,244,121,24,255,245,123,23,255,245,125,21,255,246,126,20,255,246,128,19,255,247,130,18,255,247,132,16,255,248,133,15,255,248,135,14,255,248,137,12,255,249,139,11,255,249,140,10,255,249,142,9,255,250,144,8,255,250,146,7,255,250,148,7,255,251,150,6,255,251,151,6,255,251,153,6,255,251,155,6,255,251,157,7,255,252,159,7,255,252,161,8,255,252,163,9,255,252,165,10,255,252,166,12,255,252,168,13,255,252,170,15,255,252,172,17,255,252,174,18,255,252,176,20,255,252,178,22,255,252,180,24,255,251,182,26,255,251,184,29,255,251,186,31,255,251,188,33,255,251,190,35,255,250,192,38,255,250,194,40,255,250,196,42,255,250,198,45,255,249,199,47,255,249,201,50,255,249,203,53,255,248,205,55,255,248,207,58,255,247,209,61,255,247,211,64,255,246,213,67,255,246,215,70,255,245,217,73,255,245,219,76,255,244,221,79,255,244,223,83,255,244,225,86,255,243,227,90,255,243,229,93,255,242,230,97,255,242,232,101,255,242,234,105,255,241,236,109,255,241,237,113,255,241,239,117,255,241,241,121,255,242,242,125,255,242,244,130,255,243,245,134,255,243,246,138,255,244,248,142,255,245,249,146,255,246,250,150,255,248,251,154,255,249,252,157,255,250,253,161,255,252,255,164,255]),\r\n    turbo: new Uint8Array([48,18,59,255,50,21,67,255,51,24,74,255,52,27,81,255,53,30,88,255,54,33,95,255,55,36,102,255,56,39,109,255,57,42,115,255,58,45,121,255,59,47,128,255,60,50,134,255,61,53,139,255,62,56,145,255,63,59,151,255,63,62,156,255,64,64,162,255,65,67,167,255,65,70,172,255,66,73,177,255,66,75,181,255,67,78,186,255,68,81,191,255,68,84,195,255,68,86,199,255,69,89,203,255,69,92,207,255,69,94,211,255,70,97,214,255,70,100,218,255,70,102,221,255,70,105,224,255,70,107,227,255,71,110,230,255,71,113,233,255,71,115,235,255,71,118,238,255,71,120,240,255,71,123,242,255,70,125,244,255,70,128,246,255,70,130,248,255,70,133,250,255,70,135,251,255,69,138,252,255,69,140,253,255,68,143,254,255,67,145,254,255,66,148,255,255,65,150,255,255,64,153,255,255,62,155,254,255,61,158,254,255,59,160,253,255,58,163,252,255,56,165,251,255,55,168,250,255,53,171,248,255,51,173,247,255,49,175,245,255,47,178,244,255,46,180,242,255,44,183,240,255,42,185,238,255,40,188,235,255,39,190,233,255,37,192,231,255,35,195,228,255,34,197,226,255,32,199,223,255,31,201,221,255,30,203,218,255,28,205,216,255,27,208,213,255,26,210,210,255,26,212,208,255,25,213,205,255,24,215,202,255,24,217,200,255,24,219,197,255,24,221,194,255,24,222,192,255,24,224,189,255,25,226,187,255,25,227,185,255,26,228,182,255,28,230,180,255,29,231,178,255,31,233,175,255,32,234,172,255,34,235,170,255,37,236,167,255,39,238,164,255,42,239,161,255,44,240,158,255,47,241,155,255,50,242,152,255,53,243,148,255,56,244,145,255,60,245,142,255,63,246,138,255,67,247,135,255,70,248,132,255,74,248,128,255,78,249,125,255,82,250,122,255,85,250,118,255,89,251,115,255,93,252,111,255,97,252,108,255,101,253,105,255,105,253,102,255,109,254,98,255,113,254,95,255,117,254,92,255,121,254,89,255,125,255,86,255,128,255,83,255,132,255,81,255,136,255,78,255,139,255,75,255,143,255,73,255,146,255,71,255,150,254,68,255,153,254,66,255,156,254,64,255,159,253,63,255,161,253,61,255,164,252,60,255,167,252,58,255,169,251,57,255,172,251,56,255,175,250,55,255,177,249,54,255,180,248,54,255,183,247,53,255,185,246,53,255,188,245,52,255,190,244,52,255,193,243,52,255,195,241,52,255,198,240,52,255,200,239,52,255,203,237,52,255,205,236,52,255,208,234,52,255,210,233,53,255,212,231,53,255,215,229,53,255,217,228,54,255,219,226,54,255,221,224,55,255,223,223,55,255,225,221,55,255,227,219,56,255,229,217,56,255,231,215,57,255,233,213,57,255,235,211,57,255,236,209,58,255,238,207,58,255,239,205,58,255,241,203,58,255,242,201,58,255,244,199,58,255,245,197,58,255,246,195,58,255,247,193,58,255,248,190,57,255,249,188,57,255,250,186,57,255,251,184,56,255,251,182,55,255,252,179,54,255,252,177,54,255,253,174,53,255,253,172,52,255,254,169,51,255,254,167,50,255,254,164,49,255,254,161,48,255,254,158,47,255,254,155,45,255,254,153,44,255,254,150,43,255,254,147,42,255,254,144,41,255,253,141,39,255,253,138,38,255,252,135,37,255,252,132,35,255,251,129,34,255,251,126,33,255,250,123,31,255,249,120,30,255,249,117,29,255,248,114,28,255,247,111,26,255,246,108,25,255,245,105,24,255,244,102,23,255,243,99,21,255,242,96,20,255,241,93,19,255,240,91,18,255,239,88,17,255,237,85,16,255,236,83,15,255,235,80,14,255,234,78,13,255,232,75,12,255,231,73,12,255,229,71,11,255,228,69,10,255,226,67,10,255,225,65,9,255,223,63,8,255,221,61,8,255,220,59,7,255,218,57,7,255,216,55,6,255,214,53,6,255,212,51,5,255,210,49,5,255,208,47,5,255,206,45,4,255,204,43,4,255,202,42,4,255,200,40,3,255,197,38,3,255,195,37,3,255,193,35,2,255,190,33,2,255,188,32,2,255,185,30,2,255,183,29,2,255,180,27,1,255,178,26,1,255,175,24,1,255,172,23,1,255,169,22,1,255,167,20,1,255,164,19,1,255,161,18,1,255,158,16,1,255,155,15,1,255,152,14,1,255,149,13,1,255,146,11,1,255,142,10,1,255,139,9,2,255,136,8,2,255,133,7,2,255,129,6,2,255,126,5,2,255,122,4,3,255]),\r\n  rainbow: {\r\n    colors: ['#96005A','#0000C8','#0019FF','#0098FF','#2CFF96','#97FF00','#FFEA00','#FF6F00','#FF0000'],\r\n    positions: [0, 0.125, 0.25, 0.375, 0.5, 0.625, 0.75, 0.875, 1]\r\n  },\r\n  jet: {\r\n    colors: ['#000083','#003CAA','#05FFFF','#FFFF00','#FA0000','#800000'],\r\n    positions: [0, 0.125, 0.375, 0.625, 0.875, 1]\r\n  },\r\n  hsv: {\r\n    colors: ['#ff0000','#fdff02','#f7ff02','#00fc04','#00fc0a','#01f9ff','#0200fd','#0800fd','#ff00fb','#ff00f5','#ff0006'],\r\n    positions: [0,0.169,0.173,0.337,0.341,0.506,0.671,0.675,0.839,0.843,1]\r\n  },\r\n  hot: {\r\n    colors: ['#000000','#e60000','#ffd200','#ffffff'],\r\n    positions: [0,0.3,0.6,1]\r\n  },\r\n  cool: {\r\n    colors: ['#00ffff','#ff00ff'],\r\n    positions: [0,1]\r\n  },\r\n  spring: {\r\n    colors: ['#ff00ff','#ffff00'],\r\n    positions: [0,1]\r\n  },\r\n  summer: {\r\n    colors: ['#008066','#ffff66'],\r\n    positions: [0,1]\r\n  },\r\n  autumn: {\r\n    colors: ['#ff0000','#ffff00'],\r\n    positions: [0,1]\r\n  },\r\n  winter: {\r\n    colors: ['#0000ff','#00ff80'],\r\n    positions: [0,1]\r\n  },\r\n  bone: {\r\n    colors: ['#000000','#545474','#a9c8c8','#ffffff'],\r\n    positions: [0,0.376,0.753,1]\r\n  },\r\n  copper: {\r\n    colors: ['#000000','#ffa066','#ffc77f'],\r\n    positions: [0,0.804,1]\r\n  },\r\n  greys: {\r\n    colors: ['#000000','#ffffff'],\r\n    positions: [0,1]\r\n  },\r\n  ylgnbu: {\r\n    colors: ['#081d58','#253494','#225ea8','#1d91c0','#41b6c4','#7fcdbb','#c7e9b4','#edf8d9','#ffffd9'],\r\n    positions: [0,0.125,0.25,0.375,0.5,0.625,0.75,0.875,1]\r\n  },\r\n  greens: {\r\n    colors: ['#00441b','#006d2c','#238b45','#41ab5d','#74c476','#a1d99b','#c7e9c0','#e5f5e0','#f7fcf5'],\r\n    positions: [0,0.125,0.25,0.375,0.5,0.625,0.75,0.875,1]\r\n  },\r\n  ylorrd: {\r\n    colors: ['#800026','#bd0026','#e31a1c','#fc4e2a','#fd8d3c','#feb24c','#fed976','#ffeda0','#ffffcc'],\r\n    positions: [0,0.125,0.25,0.375,0.5,0.625,0.75,0.875,1]\r\n  },\r\n  bluered: {\r\n    colors: ['#0000ff','#ff0000'],\r\n    positions: [0,1]\r\n  },\r\n  rdbu: {\r\n    colors: ['#050aac','#6a89f7','#bebebe','#dcaa84','#e6915a','#b20a1c'],\r\n    positions: [0,0.35,0.5,0.6,0.7,1]\r\n  },\r\n  picnic: {\r\n    colors: ['#0000ff','#3399ff','#66ccff','#99ccff','#ccccff','#ffffff','#ffccff','#ff99ff','#ff66cc','#ff6666','#ff0000'],\r\n    positions: [0,0.1,0.2,0.3,0.4,0.5,0.6,0.7,0.8,0.9,1]\r\n  },\r\n  portland: {\r\n    colors: ['#0c3383','#0a88ba','#f2d338','#f28f38','#d91e1e'],\r\n    positions: [0,0.25,0.5,0.75,1]\r\n  },\r\n  blackbody: {\r\n    colors: ['#000000','#e60000','#e6d200','#ffffff','#a0c8ff'],\r\n    positions: [0,0.2,0.4,0.7,1]\r\n  },\r\n  earth: {\r\n    colors: ['#000082','#00b4b4','#28d228','#e6e632','#784614','#ffffff'],\r\n    positions: [0,0.1,0.2,0.4,0.6,1]\r\n  },\r\n  electric: {\r\n    colors: ['#000000','#1e0064','#780064','#a05a00','#e6c800','#fffadc'],\r\n    positions: [0,0.15,0.4,0.6,0.8,1]\r\n  },\r\n  magma: new Uint8Array([0,0,4,255,1,0,5,255,1,1,6,255,1,1,8,255,2,1,9,255,2,2,11,255,2,2,13,255,3,3,15,255,3,3,18,255,4,4,20,255,5,4,22,255,6,5,24,255,6,5,26,255,7,6,28,255,8,7,30,255,9,7,32,255,10,8,34,255,11,9,36,255,12,9,38,255,13,10,41,255,14,11,43,255,16,11,45,255,17,12,47,255,18,13,49,255,19,13,52,255,20,14,54,255,21,14,56,255,22,15,59,255,24,15,61,255,25,16,63,255,26,16,66,255,28,16,68,255,29,17,71,255,30,17,73,255,32,17,75,255,33,17,78,255,34,17,80,255,36,18,83,255,37,18,85,255,39,18,88,255,41,17,90,255,42,17,92,255,44,17,95,255,45,17,97,255,47,17,99,255,49,17,101,255,51,16,103,255,52,16,105,255,54,16,107,255,56,16,108,255,57,15,110,255,59,15,112,255,61,15,113,255,63,15,114,255,64,15,116,255,66,15,117,255,68,15,118,255,69,16,119,255,71,16,120,255,73,16,120,255,74,16,121,255,76,17,122,255,78,17,123,255,79,18,123,255,81,18,124,255,82,19,124,255,84,19,125,255,86,20,125,255,87,21,126,255,89,21,126,255,90,22,126,255,92,22,127,255,93,23,127,255,95,24,127,255,96,24,128,255,98,25,128,255,100,26,128,255,101,26,128,255,103,27,128,255,104,28,129,255,106,28,129,255,107,29,129,255,109,29,129,255,110,30,129,255,112,31,129,255,114,31,129,255,115,32,129,255,117,33,129,255,118,33,129,255,120,34,129,255,121,34,130,255,123,35,130,255,124,35,130,255,126,36,130,255,128,37,130,255,129,37,129,255,131,38,129,255,132,38,129,255,134,39,129,255,136,39,129,255,137,40,129,255,139,41,129,255,140,41,129,255,142,42,129,255,144,42,129,255,145,43,129,255,147,43,128,255,148,44,128,255,150,44,128,255,152,45,128,255,153,45,128,255,155,46,127,255,156,46,127,255,158,47,127,255,160,47,127,255,161,48,126,255,163,48,126,255,165,49,126,255,166,49,125,255,168,50,125,255,170,51,125,255,171,51,124,255,173,52,124,255,174,52,123,255,176,53,123,255,178,53,123,255,179,54,122,255,181,54,122,255,183,55,121,255,184,55,121,255,186,56,120,255,188,57,120,255,189,57,119,255,191,58,119,255,192,58,118,255,194,59,117,255,196,60,117,255,197,60,116,255,199,61,115,255,200,62,115,255,202,62,114,255,204,63,113,255,205,64,113,255,207,64,112,255,208,65,111,255,210,66,111,255,211,67,110,255,213,68,109,255,214,69,108,255,216,69,108,255,217,70,107,255,219,71,106,255,220,72,105,255,222,73,104,255,223,74,104,255,224,76,103,255,226,77,102,255,227,78,101,255,228,79,100,255,229,80,100,255,231,82,99,255,232,83,98,255,233,84,98,255,234,86,97,255,235,87,96,255,236,88,96,255,237,90,95,255,238,91,94,255,239,93,94,255,240,95,94,255,241,96,93,255,242,98,93,255,242,100,92,255,243,101,92,255,244,103,92,255,244,105,92,255,245,107,92,255,246,108,92,255,246,110,92,255,247,112,92,255,247,114,92,255,248,116,92,255,248,118,92,255,249,120,93,255,249,121,93,255,249,123,93,255,250,125,94,255,250,127,94,255,250,129,95,255,251,131,95,255,251,133,96,255,251,135,97,255,252,137,97,255,252,138,98,255,252,140,99,255,252,142,100,255,252,144,101,255,253,146,102,255,253,148,103,255,253,150,104,255,253,152,105,255,253,154,106,255,253,155,107,255,254,157,108,255,254,159,109,255,254,161,110,255,254,163,111,255,254,165,113,255,254,167,114,255,254,169,115,255,254,170,116,255,254,172,118,255,254,174,119,255,254,176,120,255,254,178,122,255,254,180,123,255,254,182,124,255,254,183,126,255,254,185,127,255,254,187,129,255,254,189,130,255,254,191,132,255,254,193,133,255,254,194,135,255,254,196,136,255,254,198,138,255,254,200,140,255,254,202,141,255,254,204,143,255,254,205,144,255,254,207,146,255,254,209,148,255,254,211,149,255,254,213,151,255,254,215,153,255,254,216,154,255,253,218,156,255,253,220,158,255,253,222,160,255,253,224,161,255,253,226,163,255,253,227,165,255,253,229,167,255,253,231,169,255,253,233,170,255,253,235,172,255,252,236,174,255,252,238,176,255,252,240,178,255,252,242,180,255,252,244,182,255,252,246,184,255,252,247,185,255,252,249,187,255,252,251,189,255,252,253,191,255]),\r\n  plasma: new Uint8Array([13,8,135,255,16,7,136,255,19,7,137,255,22,7,138,255,25,6,140,255,27,6,141,255,29,6,142,255,32,6,143,255,34,6,144,255,36,6,145,255,38,5,145,255,40,5,146,255,42,5,147,255,44,5,148,255,46,5,149,255,47,5,150,255,49,5,151,255,51,5,151,255,53,4,152,255,55,4,153,255,56,4,154,255,58,4,154,255,60,4,155,255,62,4,156,255,63,4,156,255,65,4,157,255,67,3,158,255,68,3,158,255,70,3,159,255,72,3,159,255,73,3,160,255,75,3,161,255,76,2,161,255,78,2,162,255,80,2,162,255,81,2,163,255,83,2,163,255,85,2,164,255,86,1,164,255,88,1,164,255,89,1,165,255,91,1,165,255,92,1,166,255,94,1,166,255,96,1,166,255,97,0,167,255,99,0,167,255,100,0,167,255,102,0,167,255,103,0,168,255,105,0,168,255,106,0,168,255,108,0,168,255,110,0,168,255,111,0,168,255,113,0,168,255,114,1,168,255,116,1,168,255,117,1,168,255,119,1,168,255,120,1,168,255,122,2,168,255,123,2,168,255,125,3,168,255,126,3,168,255,128,4,168,255,129,4,167,255,131,5,167,255,132,5,167,255,134,6,166,255,135,7,166,255,136,8,166,255,138,9,165,255,139,10,165,255,141,11,165,255,142,12,164,255,143,13,164,255,145,14,163,255,146,15,163,255,148,16,162,255,149,17,161,255,150,19,161,255,152,20,160,255,153,21,159,255,154,22,159,255,156,23,158,255,157,24,157,255,158,25,157,255,160,26,156,255,161,27,155,255,162,29,154,255,163,30,154,255,165,31,153,255,166,32,152,255,167,33,151,255,168,34,150,255,170,35,149,255,171,36,148,255,172,38,148,255,173,39,147,255,174,40,146,255,176,41,145,255,177,42,144,255,178,43,143,255,179,44,142,255,180,46,141,255,181,47,140,255,182,48,139,255,183,49,138,255,184,50,137,255,186,51,136,255,187,52,136,255,188,53,135,255,189,55,134,255,190,56,133,255,191,57,132,255,192,58,131,255,193,59,130,255,194,60,129,255,195,61,128,255,196,62,127,255,197,64,126,255,198,65,125,255,199,66,124,255,200,67,123,255,201,68,122,255,202,69,122,255,203,70,121,255,204,71,120,255,204,73,119,255,205,74,118,255,206,75,117,255,207,76,116,255,208,77,115,255,209,78,114,255,210,79,113,255,211,81,113,255,212,82,112,255,213,83,111,255,213,84,110,255,214,85,109,255,215,86,108,255,216,87,107,255,217,88,106,255,218,90,106,255,218,91,105,255,219,92,104,255,220,93,103,255,221,94,102,255,222,95,101,255,222,97,100,255,223,98,99,255,224,99,99,255,225,100,98,255,226,101,97,255,226,102,96,255,227,104,95,255,228,105,94,255,229,106,93,255,229,107,93,255,230,108,92,255,231,110,91,255,231,111,90,255,232,112,89,255,233,113,88,255,233,114,87,255,234,116,87,255,235,117,86,255,235,118,85,255,236,119,84,255,237,121,83,255,237,122,82,255,238,123,81,255,239,124,81,255,239,126,80,255,240,127,79,255,240,128,78,255,241,129,77,255,241,131,76,255,242,132,75,255,243,133,75,255,243,135,74,255,244,136,73,255,244,137,72,255,245,139,71,255,245,140,70,255,246,141,69,255,246,143,68,255,247,144,68,255,247,145,67,255,247,147,66,255,248,148,65,255,248,149,64,255,249,151,63,255,249,152,62,255,249,154,62,255,250,155,61,255,250,156,60,255,250,158,59,255,251,159,58,255,251,161,57,255,251,162,56,255,252,163,56,255,252,165,55,255,252,166,54,255,252,168,53,255,252,169,52,255,253,171,51,255,253,172,51,255,253,174,50,255,253,175,49,255,253,177,48,255,253,178,47,255,253,180,47,255,253,181,46,255,254,183,45,255,254,184,44,255,254,186,44,255,254,187,43,255,254,189,42,255,254,190,42,255,254,192,41,255,253,194,41,255,253,195,40,255,253,197,39,255,253,198,39,255,253,200,39,255,253,202,38,255,253,203,38,255,252,205,37,255,252,206,37,255,252,208,37,255,252,210,37,255,251,211,36,255,251,213,36,255,251,215,36,255,250,216,36,255,250,218,36,255,249,220,36,255,249,221,37,255,248,223,37,255,248,225,37,255,247,226,37,255,247,228,37,255,246,230,38,255,246,232,38,255,245,233,38,255,245,235,39,255,244,237,39,255,243,238,39,255,243,240,39,255,242,242,39,255,241,244,38,255,241,245,37,255,240,247,36,255,240,249,33,255]),\r\n  redblue: {\r\n    colors: ['#ff0000', '#0000ff'],\r\n    positions: [0,1]\r\n  },\r\n  coolwarm: {\r\n    colors: ['#0000ff', '#ffffff', '#ff0000'],\r\n    positions: [0,0.5,1]\r\n  },\r\n  diverging_1: {\r\n    colors: ['#400040','#3b004d','#36005b','#320068','#2d0076','#290084','#240091','#20009f','#1b00ad','#1600ba','#1200c8','#0d00d6','#0900e3','#0400f1','#0000ff','#0217ff','#042eff','#0645ff','#095cff','#0b73ff','#0d8bff','#10a2ff','#12b9ff','#14d0ff','#17e7ff','#19ffff','#3fffff','#66ffff','#8cffff','#b2ffff','#d8ffff','#ffffff','#ffffd4','#ffffaa','#ffff7f','#ffff54','#ffff2a','#ffff00','#ffed00','#ffdd00','#ffcc00','#ffba00','#ffaa00','#ff9900','#ff8700','#ff7700','#ff6600','#ff5400','#ff4400','#ff3300','#ff2100','#ff1100','#ff0000','#ff0017','#ff002e','#ff0045','#ff005c','#ff0073','#ff008b','#ff00a2','#ff00b9','#ff00d0','#ff00e7','#ff00ff'],\r\n    positions: [0.0,0.01587301587,0.03174603174,0.04761904761,0.06349206348,0.07936507935,0.09523809522,0.11111111109,0.12698412696,0.14285714283,0.15873015870,0.17460317457,0.19047619044,0.20634920631,0.22222222218,0.23809523805,0.25396825392,0.26984126979,0.28571428566,0.30158730153,0.31746031740,0.33333333327,0.34920634914,0.36507936501,0.38095238088,0.39682539675,0.41269841262,0.42857142849,0.44444444436,0.46031746023,0.47619047610,0.49206349197,0.50793650784,0.52380952371,0.53968253958,0.55555555545,0.57142857132,0.58730158719,0.60317460306,0.61904761893,0.63492063480,0.65079365067,0.66666666654,0.68253968241,0.69841269828,0.71428571415,0.73015873002,0.74603174589,0.76190476176,0.77777777763,0.79365079350,0.80952380937,0.82539682524,0.84126984111,0.85714285698,0.87301587285,0.88888888872,0.90476190459,0.92063492046,0.93650793633,0.95238095220,0.96825396807,0.98412698394,1]\r\n  },\r\n  diverging_2: {\r\n    colors: ['#000000','#030aff','#204aff','#3c8aff','#77c4ff','#f0ffff','#f0ffff','#f2ff7f','#ffff00','#ff831e','#ff083d','#ff00ff'],\r\n    positions: [0,0.0000000001,0.1,0.2,0.3333,0.4666,0.5333,0.6666,0.8,0.9,0.999999999999,1]\r\n  },\r\n  blackwhite: {\r\n    colors: ['#000000','#ffffff'],\r\n    positions: [0,1]\r\n  },\r\n  twilight: {\r\n    colors: ['#E2D9E2', '#E0D9E2', '#DDD9E0', '#DAD8DF', '#D6D7DD', '#D2D5DB', '#CDD3D8', '#C8D0D6', '#C2CED4', '#BCCBD1', '#B6C8CF', '#B0C5CD', '#AAC2CC', '#A4BECA', '#9EBBC9', '#99B8C8', '#93B4C6', '#8EB1C5', '#89ADC5', '#85A9C4', '#80A5C3', '#7CA2C2', '#789EC2', '#759AC1', '#7196C1', '#6E92C0', '#6C8EBF', '#698ABF', '#6786BE', '#6682BD', '#647DBC', '#6379BB', '#6275BA', '#6170B9', '#606CB8', '#6067B6', '#5F62B4', '#5F5EB3', '#5F59B1', '#5E54AE', '#5E4FAC', '#5E4BA9', '#5E46A6', '#5D41A3', '#5D3CA0', '#5C379C', '#5B3298', '#5A2E93', '#59298E', '#572588', '#562182', '#531E7C', '#511A75', '#4E186F', '#4B1668', '#471461', '#44135A', '#411254', '#3D114E', '#3A1149', '#371144', '#351140', '#33113C', '#311339', '#301437', '#331237', '#351138', '#381139', '#3B113B', '#3F123D', '#43123E', '#481341', '#4D1443', '#521545', '#571647', '#5C1749', '#61184B', '#67194C', '#6C1B4E', '#711D4F', '#761F4F', '#7B2150', '#802350', '#852650', '#8A2950', '#8E2C50', '#922F50', '#963350', '#9A3750', '#9E3B50', '#A13F50', '#A54350', '#A84750', '#AB4B50', '#AE5051', '#B15452', '#B35953', '#B65D54', '#B86255', '#BA6657', '#BC6B59', '#BE705B', '#C0755E', '#C27A61', '#C37F64', '#C58468', '#C6896C', '#C78E71', '#C89275', '#C9977B', '#CA9C80', '#CCA186', '#CDA68C', '#CEAB92', '#CFAF99', '#D1B4A0', '#D2B8A7', '#D4BDAD', '#D6C1B4', '#D8C5BB', '#D9C9C2', '#DBCCC8', '#DDD0CE', '#DED3D3', '#DFD5D8', '#E0D7DB', '#E1D8DF', '#E2D9E1'],\r\n    positions: [0.0000000000, 0.0078740157, 0.0157480315, 0.0236220472, 0.0314960630, 0.0393700787, 0.0472440945, 0.0551181102, 0.0629921260, 0.0708661417, 0.0787401575, 0.0866141732, 0.0944881890, 0.1023622047, 0.1102362205, 0.1181102362, 0.1259842520, 0.1338582677, 0.1417322835, 0.1496062992, 0.1574803150, 0.1653543307, 0.1732283465, 0.1811023622, 0.1889763780, 0.1968503937, 0.2047244094, 0.2125984252, 0.2204724409, 0.2283464567, 0.2362204724, 0.2440944882, 0.2519685039, 0.2598425197, 0.2677165354, 0.2755905512, 0.2834645669, 0.2913385827, 0.2992125984, 0.3070866142, 0.3149606299, 0.3228346457, 0.3307086614, 0.3385826772, 0.3464566929, 0.3543307087, 0.3622047244, 0.3700787402, 0.3779527559, 0.3858267717, 0.3937007874, 0.4015748031, 0.4094488189, 0.4173228346, 0.4251968504, 0.4330708661, 0.4409448819, 0.4488188976, 0.4566929134, 0.4645669291, 0.4724409449, 0.4803149606, 0.4881889764, 0.4960629921, 0.5039370079, 0.5118110236, 0.5196850394, 0.5275590551, 0.5354330709, 0.5433070866, 0.5511811024, 0.5590551181, 0.5669291339, 0.5748031496, 0.5826771654, 0.5905511811, 0.5984251969, 0.6062992126, 0.6141732283, 0.6220472441, 0.6299212598, 0.6377952756, 0.6456692913, 0.6535433071, 0.6614173228, 0.6692913386, 0.6771653543, 0.6850393701, 0.6929133858, 0.7007874016, 0.7086614173, 0.7165354331, 0.7244094488, 0.7322834646, 0.7401574803, 0.7480314961, 0.7559055118, 0.7637795276, 0.7716535433, 0.7795275591, 0.7874015748, 0.7952755906, 0.8031496063, 0.8110236220, 0.8188976378, 0.8267716535, 0.8346456693, 0.8425196850, 0.8503937008, 0.8582677165, 0.8661417323, 0.8740157480, 0.8818897638, 0.8897637795, 0.8976377953, 0.9055118110, 0.9133858268, 0.9212598425, 0.9291338583, 0.9370078740, 0.9448818898, 0.9527559055, 0.9606299213, 0.9685039370, 0.9763779528, 0.9842519685, 0.9921259843, 1.0000000000]\r\n  },\r\n  twilight_shifted: {\r\n    colors: ['#301437', '#32123A', '#34113E', '#361142', '#391146', '#3C114B', '#3F1251', '#421257', '#46145E', '#491564', '#4C176B', '#4F1972', '#521C79', '#551F7F', '#572385', '#58278B', '#5A2B90', '#5B3095', '#5C359A', '#5D3A9E', '#5D3EA1', '#5E43A5', '#5E48A8', '#5E4DAB', '#5E52AD', '#5F57B0', '#5F5BB2', '#5F60B4', '#5F65B5', '#6069B7', '#606EB8', '#6172BA', '#6277BB', '#637BBC', '#657FBD', '#6684BD', '#6888BE', '#6B8CBF', '#6D90C0', '#7094C0', '#7398C1', '#769CC1', '#7AA0C2', '#7EA4C3', '#82A7C3', '#87ABC4', '#8CAFC5', '#91B2C6', '#96B6C7', '#9CB9C8', '#A1BDC9', '#A7C0CB', '#ADC3CD', '#B3C6CE', '#B9C9D0', '#BFCCD3', '#C5CFD5', '#CBD2D7', '#D0D4D9', '#D4D6DC', '#D8D8DE', '#DCD9DF', '#DED9E1', '#E1D9E2', '#E2D9E1', '#E1D8DF', '#E0D7DB', '#DFD5D8', '#DED3D3', '#DDD0CE', '#DBCCC8', '#D9C9C2', '#D8C5BB', '#D6C1B4', '#D4BDAD', '#D2B8A7', '#D1B4A0', '#CFAF99', '#CEAB92', '#CDA68C', '#CCA186', '#CA9C80', '#C9977B', '#C89275', '#C78E71', '#C6896C', '#C58468', '#C37F64', '#C27A61', '#C0755E', '#BE705B', '#BC6B59', '#BA6657', '#B86255', '#B65D54', '#B35953', '#B15452', '#AE5051', '#AB4B50', '#A84750', '#A54350', '#A13F50', '#9E3B50', '#9A3750', '#963350', '#922F50', '#8E2C50', '#8A2950', '#852650', '#802350', '#7B2150', '#761F4F', '#711D4F', '#6C1B4E', '#67194C', '#61184B', '#5C1749', '#571647', '#521545', '#4D1443', '#481341', '#43123E', '#3F123D', '#3B113B', '#381139', '#351138', '#331237', '#301437'],\r\n    positions: [0.0000000000, 0.0078740157, 0.0157480315, 0.0236220472, 0.0314960630, 0.0393700787, 0.0472440945, 0.0551181102, 0.0629921260, 0.0708661417, 0.0787401575, 0.0866141732, 0.0944881890, 0.1023622047, 0.1102362205, 0.1181102362, 0.1259842520, 0.1338582677, 0.1417322835, 0.1496062992, 0.1574803150, 0.1653543307, 0.1732283465, 0.1811023622, 0.1889763780, 0.1968503937, 0.2047244094, 0.2125984252, 0.2204724409, 0.2283464567, 0.2362204724, 0.2440944882, 0.2519685039, 0.2598425197, 0.2677165354, 0.2755905512, 0.2834645669, 0.2913385827, 0.2992125984, 0.3070866142, 0.3149606299, 0.3228346457, 0.3307086614, 0.3385826772, 0.3464566929, 0.3543307087, 0.3622047244, 0.3700787402, 0.3779527559, 0.3858267717, 0.3937007874, 0.4015748031, 0.4094488189, 0.4173228346, 0.4251968504, 0.4330708661, 0.4409448819, 0.4488188976, 0.4566929134, 0.4645669291, 0.4724409449, 0.4803149606, 0.4881889764, 0.4960629921, 0.5039370079, 0.5118110236, 0.5196850394, 0.5275590551, 0.5354330709, 0.5433070866, 0.5511811024, 0.5590551181, 0.5669291339, 0.5748031496, 0.5826771654, 0.5905511811, 0.5984251969, 0.6062992126, 0.6141732283, 0.6220472441, 0.6299212598, 0.6377952756, 0.6456692913, 0.6535433071, 0.6614173228, 0.6692913386, 0.6771653543, 0.6850393701, 0.6929133858, 0.7007874016, 0.7086614173, 0.7165354331, 0.7244094488, 0.7322834646, 0.7401574803, 0.7480314961, 0.7559055118, 0.7637795276, 0.7716535433, 0.7795275591, 0.7874015748, 0.7952755906, 0.8031496063, 0.8110236220, 0.8188976378, 0.8267716535, 0.8346456693, 0.8425196850, 0.8503937008, 0.8582677165, 0.8661417323, 0.8740157480, 0.8818897638, 0.8897637795, 0.8976377953, 0.9055118110, 0.9133858268, 0.9212598425, 0.9291338583, 0.9370078740, 0.9448818898, 0.9527559055, 0.9606299213, 0.9685039370, 0.9763779528, 0.9842519685, 0.9921259843, 1.0000000000]\r\n  },\r\n};\r\n","// Generated by PEG.js v0.11.0-master.f69239d, https://pegjs.org/\r\n\r\n\"use strict\";\r\n\r\nfunction peg$subclass(child, parent) {\r\n  function C() { this.constructor = child; }\r\n  C.prototype = parent.prototype;\r\n  child.prototype = new C();\r\n}\r\n\r\nfunction peg$SyntaxError(message, expected, found, location) {\r\n  this.message = message;\r\n  this.expected = expected;\r\n  this.found = found;\r\n  this.location = location;\r\n  this.name = \"SyntaxError\";\r\n\r\n  // istanbul ignore next\r\n  if (typeof Error.captureStackTrace === \"function\") {\r\n    Error.captureStackTrace(this, peg$SyntaxError);\r\n  }\r\n}\r\n\r\npeg$subclass(peg$SyntaxError, Error);\r\n\r\npeg$SyntaxError.buildMessage = function(expected, found) {\r\n  var DESCRIBE_EXPECTATION_FNS = {\r\n    literal: function(expectation) {\r\n      return \"\\\"\" + literalEscape(expectation.text) + \"\\\"\";\r\n    },\r\n\r\n    class: function(expectation) {\r\n      var escapedParts = expectation.parts.map(function(part) {\r\n        return Array.isArray(part)\r\n          ? classEscape(part[0]) + \"-\" + classEscape(part[1])\r\n          : classEscape(part);\r\n      });\r\n\r\n      return \"[\" + (expectation.inverted ? \"^\" : \"\") + escapedParts + \"]\";\r\n    },\r\n\r\n    any: function() {\r\n      return \"any character\";\r\n    },\r\n\r\n    end: function() {\r\n      return \"end of input\";\r\n    },\r\n\r\n    other: function(expectation) {\r\n      return expectation.description;\r\n    },\r\n\r\n    not: function(expectation) {\r\n      return \"not \" + describeExpectation(expectation.expected);\r\n    }\r\n  };\r\n\r\n  function hex(ch) {\r\n    return ch.charCodeAt(0).toString(16).toUpperCase();\r\n  }\r\n\r\n  function literalEscape(s) {\r\n    return s\r\n      .replace(/\\\\/g, \"\\\\\\\\\")\r\n      .replace(/\"/g,  \"\\\\\\\"\")\r\n      .replace(/\\0/g, \"\\\\0\")\r\n      .replace(/\\t/g, \"\\\\t\")\r\n      .replace(/\\n/g, \"\\\\n\")\r\n      .replace(/\\r/g, \"\\\\r\")\r\n      .replace(/[\\x00-\\x0F]/g,          function(ch) { return \"\\\\x0\" + hex(ch); })\r\n      .replace(/[\\x10-\\x1F\\x7F-\\x9F]/g, function(ch) { return \"\\\\x\"  + hex(ch); });\r\n  }\r\n\r\n  function classEscape(s) {\r\n    return s\r\n      .replace(/\\\\/g, \"\\\\\\\\\")\r\n      .replace(/\\]/g, \"\\\\]\")\r\n      .replace(/\\^/g, \"\\\\^\")\r\n      .replace(/-/g,  \"\\\\-\")\r\n      .replace(/\\0/g, \"\\\\0\")\r\n      .replace(/\\t/g, \"\\\\t\")\r\n      .replace(/\\n/g, \"\\\\n\")\r\n      .replace(/\\r/g, \"\\\\r\")\r\n      .replace(/[\\x00-\\x0F]/g,          function(ch) { return \"\\\\x0\" + hex(ch); })\r\n      .replace(/[\\x10-\\x1F\\x7F-\\x9F]/g, function(ch) { return \"\\\\x\"  + hex(ch); });\r\n  }\r\n\r\n  function describeExpectation(expectation) {\r\n    return DESCRIBE_EXPECTATION_FNS[expectation.type](expectation);\r\n  }\r\n\r\n  function describeExpected(expected) {\r\n    var descriptions = expected.map(describeExpectation);\r\n    var i, j;\r\n\r\n    descriptions.sort();\r\n\r\n    if (descriptions.length > 0) {\r\n      for (i = 1, j = 1; i < descriptions.length; i++) {\r\n        if (descriptions[i - 1] !== descriptions[i]) {\r\n          descriptions[j] = descriptions[i];\r\n          j++;\r\n        }\r\n      }\r\n      descriptions.length = j;\r\n    }\r\n\r\n    switch (descriptions.length) {\r\n      case 1:\r\n        return descriptions[0];\r\n\r\n      case 2:\r\n        return descriptions[0] + \" or \" + descriptions[1];\r\n\r\n      default:\r\n        return descriptions.slice(0, -1).join(\", \")\r\n          + \", or \"\r\n          + descriptions[descriptions.length - 1];\r\n    }\r\n  }\r\n\r\n  function describeFound(found) {\r\n    return found ? \"\\\"\" + literalEscape(found) + \"\\\"\" : \"end of input\";\r\n  }\r\n\r\n  return \"Expected \" + describeExpected(expected) + \" but \" + describeFound(found) + \" found.\";\r\n};\r\n\r\nfunction peg$parse(input, options) {\r\n  options = options !== undefined ? options : {};\r\n\r\n  var peg$FAILED = {};\r\n\r\n  var peg$startRuleFunctions = { Expression: peg$parseExpression };\r\n  var peg$startRuleFunction = peg$parseExpression;\r\n\r\n  var peg$c0 = \"+\";\r\n  var peg$c1 = \"-\";\r\n  var peg$c2 = \"*\";\r\n  var peg$c3 = \"/\";\r\n  var peg$c4 = \"**\";\r\n  var peg$c5 = \"(\";\r\n  var peg$c6 = \")\";\r\n\r\n  var peg$r0 = /^[\\-+]/;\r\n  var peg$r1 = /^[0-9]/;\r\n  var peg$r2 = /^[a-zA-Z_$]/;\r\n  var peg$r3 = /^[a-zA-Z_$0-9]/;\r\n  var peg$r4 = /^[ \\t\\n\\r]/;\r\n\r\n  var peg$e0 = peg$literalExpectation(\"+\", false);\r\n  var peg$e1 = peg$literalExpectation(\"-\", false);\r\n  var peg$e2 = peg$literalExpectation(\"*\", false);\r\n  var peg$e3 = peg$literalExpectation(\"/\", false);\r\n  var peg$e4 = peg$literalExpectation(\"**\", false);\r\n  var peg$e5 = peg$literalExpectation(\"(\", false);\r\n  var peg$e6 = peg$literalExpectation(\")\", false);\r\n  var peg$e7 = peg$otherExpectation(\"float\");\r\n  var peg$e8 = peg$otherExpectation(\"integer\");\r\n  var peg$e9 = peg$otherExpectation(\"identifier\");\r\n  var peg$e10 = peg$otherExpectation(\"whitespace\");\r\n\r\n  var peg$f0 = function(head, tail) {\r\n        var lhs = head;\r\n        var i, op;\r\n\r\n        for (i = 0; i < tail.length; i++) {\r\n          op = tail[i][1];\r\n          lhs = makeNode(lhs, tail[i][3], op);\r\n        }\r\n\r\n        return lhs;\r\n      };\r\n  var peg$f1 = function(head, tail) {\r\n        var lhs = head;\r\n        var i, op;\r\n\r\n        for (i = 0; i < tail.length; i++) {\r\n          op = tail[i][1];\r\n          lhs = makeNode(lhs, tail[i][3], op);\r\n        }\r\n        return lhs;\r\n      };\r\n  var peg$f2 = function(expr) { return expr; };\r\n  var peg$f3 = function(n, e) { return {fn:n, lhs:e}};\r\n  var peg$f4 = function() { return parseFloat(text(), 10); };\r\n  var peg$f5 = function() { return parseInt(text(), 10); };\r\n  var peg$f6 = function() { return text(); };\r\n\r\n  var peg$currPos = 0;\r\n  var peg$savedPos = 0;\r\n  var peg$posDetailsCache = [{ line: 1, column: 1 }];\r\n  var peg$expected = [];\r\n  var peg$silentFails = 0;\r\n\r\n  var peg$result;\r\n\r\n  if (\"startRule\" in options) {\r\n    if (!(options.startRule in peg$startRuleFunctions)) {\r\n      throw new Error(\"Can't start parsing from rule \\\"\" + options.startRule + \"\\\".\");\r\n    }\r\n\r\n    peg$startRuleFunction = peg$startRuleFunctions[options.startRule];\r\n  }\r\n\r\n  function text() {\r\n    return input.substring(peg$savedPos, peg$currPos);\r\n  }\r\n\r\n  function offset() {\r\n    return peg$savedPos;\r\n  }\r\n\r\n  function range() {\r\n    return [peg$savedPos, peg$currPos];\r\n  }\r\n\r\n  function location() {\r\n    return peg$computeLocation(peg$savedPos, peg$currPos);\r\n  }\r\n\r\n  function expected(description, location) {\r\n    location = location !== undefined\r\n      ? location\r\n      : peg$computeLocation(peg$savedPos, peg$currPos);\r\n\r\n    throw peg$buildStructuredError(\r\n      [peg$otherExpectation(description)],\r\n      input.substring(peg$savedPos, peg$currPos),\r\n      location\r\n    );\r\n  }\r\n\r\n  function error(message, location) {\r\n    location = location !== undefined\r\n      ? location\r\n      : peg$computeLocation(peg$savedPos, peg$currPos);\r\n\r\n    throw peg$buildSimpleError(message, location);\r\n  }\r\n\r\n  function peg$literalExpectation(text, ignoreCase) {\r\n    return { type: \"literal\", text: text, ignoreCase: ignoreCase };\r\n  }\r\n\r\n  function peg$classExpectation(parts, inverted, ignoreCase) {\r\n    return { type: \"class\", parts: parts, inverted: inverted, ignoreCase: ignoreCase };\r\n  }\r\n\r\n  function peg$anyExpectation() {\r\n    return { type: \"any\" };\r\n  }\r\n\r\n  function peg$endExpectation() {\r\n    return { type: \"end\" };\r\n  }\r\n\r\n  function peg$otherExpectation(description) {\r\n    return { type: \"other\", description: description };\r\n  }\r\n\r\n  function peg$computePosDetails(pos) {\r\n    var details = peg$posDetailsCache[pos];\r\n    var p;\r\n\r\n    if (details) {\r\n      return details;\r\n    } else {\r\n      p = pos - 1;\r\n      while (!peg$posDetailsCache[p]) {\r\n        p--;\r\n      }\r\n\r\n      details = peg$posDetailsCache[p];\r\n      details = {\r\n        line: details.line,\r\n        column: details.column\r\n      };\r\n\r\n      while (p < pos) {\r\n        if (input.charCodeAt(p) === 10) {\r\n          details.line++;\r\n          details.column = 1;\r\n        } else {\r\n          details.column++;\r\n        }\r\n\r\n        p++;\r\n      }\r\n\r\n      peg$posDetailsCache[pos] = details;\r\n\r\n      return details;\r\n    }\r\n  }\r\n\r\n  var peg$VALIDFILENAME = typeof options.filename === \"string\" && options.filename.length > 0;\r\n  function peg$computeLocation(startPos, endPos) {\r\n    var loc = {};\r\n\r\n    if ( peg$VALIDFILENAME ) loc.filename = options.filename;\r\n\r\n    var startPosDetails = peg$computePosDetails(startPos);\r\n    loc.start = {\r\n      offset: startPos,\r\n      line: startPosDetails.line,\r\n      column: startPosDetails.column\r\n    };\r\n\r\n    var endPosDetails = peg$computePosDetails(endPos);\r\n    loc.end = {\r\n      offset: endPos,\r\n      line: endPosDetails.line,\r\n      column: endPosDetails.column\r\n    };\r\n\r\n    return loc;\r\n  }\r\n\r\n  function peg$begin() {\r\n    peg$expected.push({ pos: peg$currPos, variants: [] });\r\n  }\r\n\r\n  function peg$expect(expected) {\r\n    var top = peg$expected[peg$expected.length - 1];\r\n\r\n    if (peg$currPos < top.pos) { return; }\r\n\r\n    if (peg$currPos > top.pos) {\r\n      top.pos = peg$currPos;\r\n      top.variants = [];\r\n    }\r\n\r\n    top.variants.push(expected);\r\n  }\r\n\r\n  function peg$end(invert) {\r\n    var expected = peg$expected.pop();\r\n    var top = peg$expected[peg$expected.length - 1];\r\n    var variants = expected.variants;\r\n\r\n    if (top.pos !== expected.pos) { return; }\r\n\r\n    if (invert) {\r\n      variants = variants.map(function(e) {\r\n        return e.type === \"not\" ? e.expected : { type: \"not\", expected: e };\r\n      });\r\n    }\r\n\r\n    Array.prototype.push.apply(top.variants, variants);\r\n  }\r\n\r\n  function peg$buildSimpleError(message, location) {\r\n    return new peg$SyntaxError(message, null, null, location);\r\n  }\r\n\r\n  function peg$buildStructuredError(expected, found, location) {\r\n    return new peg$SyntaxError(\r\n      peg$SyntaxError.buildMessage(expected, found),\r\n      expected,\r\n      found,\r\n      location\r\n    );\r\n  }\r\n\r\n  function peg$buildError() {\r\n    var expected = peg$expected[0];\r\n    var failPos = expected.pos;\r\n\r\n    return peg$buildStructuredError(\r\n      expected.variants,\r\n      failPos < input.length ? input.charAt(failPos) : null,\r\n      failPos < input.length\r\n        ? peg$computeLocation(failPos, failPos + 1)\r\n        : peg$computeLocation(failPos, failPos)\r\n    );\r\n  }\r\n\r\n  function peg$parseExpression() {\r\n    var s0, s1, s2, s3, s4, s5, s6, s7;\r\n\r\n    var rule$expects = function (expected) {\r\n      if (peg$silentFails === 0) peg$expect(expected);\r\n    }\r\n\r\n    s0 = peg$currPos;\r\n    s1 = peg$parseTerm();\r\n    if (s1 !== peg$FAILED) {\r\n      s2 = [];\r\n      s3 = peg$currPos;\r\n      s4 = peg$parse_();\r\n      rule$expects(peg$e0);\r\n      if (input.charCodeAt(peg$currPos) === 43) {\r\n        s5 = peg$c0;\r\n        peg$currPos++;\r\n      } else {\r\n        s5 = peg$FAILED;\r\n      }\r\n      if (s5 === peg$FAILED) {\r\n        rule$expects(peg$e1);\r\n        if (input.charCodeAt(peg$currPos) === 45) {\r\n          s5 = peg$c1;\r\n          peg$currPos++;\r\n        } else {\r\n          s5 = peg$FAILED;\r\n        }\r\n      }\r\n      if (s5 !== peg$FAILED) {\r\n        s6 = peg$parse_();\r\n        s7 = peg$parseTerm();\r\n        if (s7 !== peg$FAILED) {\r\n          s4 = [s4, s5, s6, s7];\r\n          s3 = s4;\r\n        } else {\r\n          peg$currPos = s3;\r\n          s3 = peg$FAILED;\r\n        }\r\n      } else {\r\n        peg$currPos = s3;\r\n        s3 = peg$FAILED;\r\n      }\r\n      while (s3 !== peg$FAILED) {\r\n        s2.push(s3);\r\n        s3 = peg$currPos;\r\n        s4 = peg$parse_();\r\n        rule$expects(peg$e0);\r\n        if (input.charCodeAt(peg$currPos) === 43) {\r\n          s5 = peg$c0;\r\n          peg$currPos++;\r\n        } else {\r\n          s5 = peg$FAILED;\r\n        }\r\n        if (s5 === peg$FAILED) {\r\n          rule$expects(peg$e1);\r\n          if (input.charCodeAt(peg$currPos) === 45) {\r\n            s5 = peg$c1;\r\n            peg$currPos++;\r\n          } else {\r\n            s5 = peg$FAILED;\r\n          }\r\n        }\r\n        if (s5 !== peg$FAILED) {\r\n          s6 = peg$parse_();\r\n          s7 = peg$parseTerm();\r\n          if (s7 !== peg$FAILED) {\r\n            s4 = [s4, s5, s6, s7];\r\n            s3 = s4;\r\n          } else {\r\n            peg$currPos = s3;\r\n            s3 = peg$FAILED;\r\n          }\r\n        } else {\r\n          peg$currPos = s3;\r\n          s3 = peg$FAILED;\r\n        }\r\n      }\r\n      peg$savedPos = s0;\r\n      s0 = peg$f0(s1, s2);\r\n    } else {\r\n      peg$currPos = s0;\r\n      s0 = peg$FAILED;\r\n    }\r\n\r\n    return s0;\r\n  }\r\n\r\n  function peg$parseTerm() {\r\n    var s0, s1, s2, s3, s4, s5, s6, s7;\r\n\r\n    var rule$expects = function (expected) {\r\n      if (peg$silentFails === 0) peg$expect(expected);\r\n    }\r\n\r\n    s0 = peg$currPos;\r\n    s1 = peg$parseExponential();\r\n    if (s1 !== peg$FAILED) {\r\n      s2 = [];\r\n      s3 = peg$currPos;\r\n      s4 = peg$parse_();\r\n      rule$expects(peg$e2);\r\n      if (input.charCodeAt(peg$currPos) === 42) {\r\n        s5 = peg$c2;\r\n        peg$currPos++;\r\n      } else {\r\n        s5 = peg$FAILED;\r\n      }\r\n      if (s5 === peg$FAILED) {\r\n        rule$expects(peg$e3);\r\n        if (input.charCodeAt(peg$currPos) === 47) {\r\n          s5 = peg$c3;\r\n          peg$currPos++;\r\n        } else {\r\n          s5 = peg$FAILED;\r\n        }\r\n      }\r\n      if (s5 !== peg$FAILED) {\r\n        s6 = peg$parse_();\r\n        s7 = peg$parseExponential();\r\n        if (s7 !== peg$FAILED) {\r\n          s4 = [s4, s5, s6, s7];\r\n          s3 = s4;\r\n        } else {\r\n          peg$currPos = s3;\r\n          s3 = peg$FAILED;\r\n        }\r\n      } else {\r\n        peg$currPos = s3;\r\n        s3 = peg$FAILED;\r\n      }\r\n      while (s3 !== peg$FAILED) {\r\n        s2.push(s3);\r\n        s3 = peg$currPos;\r\n        s4 = peg$parse_();\r\n        rule$expects(peg$e2);\r\n        if (input.charCodeAt(peg$currPos) === 42) {\r\n          s5 = peg$c2;\r\n          peg$currPos++;\r\n        } else {\r\n          s5 = peg$FAILED;\r\n        }\r\n        if (s5 === peg$FAILED) {\r\n          rule$expects(peg$e3);\r\n          if (input.charCodeAt(peg$currPos) === 47) {\r\n            s5 = peg$c3;\r\n            peg$currPos++;\r\n          } else {\r\n            s5 = peg$FAILED;\r\n          }\r\n        }\r\n        if (s5 !== peg$FAILED) {\r\n          s6 = peg$parse_();\r\n          s7 = peg$parseExponential();\r\n          if (s7 !== peg$FAILED) {\r\n            s4 = [s4, s5, s6, s7];\r\n            s3 = s4;\r\n          } else {\r\n            peg$currPos = s3;\r\n            s3 = peg$FAILED;\r\n          }\r\n        } else {\r\n          peg$currPos = s3;\r\n          s3 = peg$FAILED;\r\n        }\r\n      }\r\n      peg$savedPos = s0;\r\n      s0 = peg$f1(s1, s2);\r\n    } else {\r\n      peg$currPos = s0;\r\n      s0 = peg$FAILED;\r\n    }\r\n\r\n    return s0;\r\n  }\r\n\r\n  function peg$parseExponential() {\r\n    var s0, s1, s2, s3, s4, s5, s6, s7;\r\n\r\n    var rule$expects = function (expected) {\r\n      if (peg$silentFails === 0) peg$expect(expected);\r\n    }\r\n\r\n    s0 = peg$currPos;\r\n    s1 = peg$parseFactor();\r\n    if (s1 !== peg$FAILED) {\r\n      s2 = [];\r\n      s3 = peg$currPos;\r\n      s4 = peg$parse_();\r\n      rule$expects(peg$e4);\r\n      if (input.substr(peg$currPos, 2) === peg$c4) {\r\n        s5 = peg$c4;\r\n        peg$currPos += 2;\r\n      } else {\r\n        s5 = peg$FAILED;\r\n      }\r\n      if (s5 !== peg$FAILED) {\r\n        s6 = peg$parse_();\r\n        s7 = peg$parseFactor();\r\n        if (s7 !== peg$FAILED) {\r\n          s4 = [s4, s5, s6, s7];\r\n          s3 = s4;\r\n        } else {\r\n          peg$currPos = s3;\r\n          s3 = peg$FAILED;\r\n        }\r\n      } else {\r\n        peg$currPos = s3;\r\n        s3 = peg$FAILED;\r\n      }\r\n      while (s3 !== peg$FAILED) {\r\n        s2.push(s3);\r\n        s3 = peg$currPos;\r\n        s4 = peg$parse_();\r\n        rule$expects(peg$e4);\r\n        if (input.substr(peg$currPos, 2) === peg$c4) {\r\n          s5 = peg$c4;\r\n          peg$currPos += 2;\r\n        } else {\r\n          s5 = peg$FAILED;\r\n        }\r\n        if (s5 !== peg$FAILED) {\r\n          s6 = peg$parse_();\r\n          s7 = peg$parseFactor();\r\n          if (s7 !== peg$FAILED) {\r\n            s4 = [s4, s5, s6, s7];\r\n            s3 = s4;\r\n          } else {\r\n            peg$currPos = s3;\r\n            s3 = peg$FAILED;\r\n          }\r\n        } else {\r\n          peg$currPos = s3;\r\n          s3 = peg$FAILED;\r\n        }\r\n      }\r\n      peg$savedPos = s0;\r\n      s0 = peg$f1(s1, s2);\r\n    } else {\r\n      peg$currPos = s0;\r\n      s0 = peg$FAILED;\r\n    }\r\n\r\n    return s0;\r\n  }\r\n\r\n  function peg$parseFactor() {\r\n    var s0, s1, s2, s3, s4, s5;\r\n\r\n    var rule$expects = function (expected) {\r\n      if (peg$silentFails === 0) peg$expect(expected);\r\n    }\r\n\r\n    s0 = peg$currPos;\r\n    rule$expects(peg$e5);\r\n    if (input.charCodeAt(peg$currPos) === 40) {\r\n      s1 = peg$c5;\r\n      peg$currPos++;\r\n    } else {\r\n      s1 = peg$FAILED;\r\n    }\r\n    if (s1 !== peg$FAILED) {\r\n      s2 = peg$parse_();\r\n      s3 = peg$parseExpression();\r\n      if (s3 !== peg$FAILED) {\r\n        s4 = peg$parse_();\r\n        rule$expects(peg$e6);\r\n        if (input.charCodeAt(peg$currPos) === 41) {\r\n          s5 = peg$c6;\r\n          peg$currPos++;\r\n        } else {\r\n          s5 = peg$FAILED;\r\n        }\r\n        if (s5 !== peg$FAILED) {\r\n          peg$savedPos = s0;\r\n          s0 = peg$f2(s3);\r\n        } else {\r\n          peg$currPos = s0;\r\n          s0 = peg$FAILED;\r\n        }\r\n      } else {\r\n        peg$currPos = s0;\r\n        s0 = peg$FAILED;\r\n      }\r\n    } else {\r\n      peg$currPos = s0;\r\n      s0 = peg$FAILED;\r\n    }\r\n    if (s0 === peg$FAILED) {\r\n      s0 = peg$parseFloat();\r\n      if (s0 === peg$FAILED) {\r\n        s0 = peg$parseInteger();\r\n        if (s0 === peg$FAILED) {\r\n          s0 = peg$currPos;\r\n          s1 = peg$parseIdentifier();\r\n          if (s1 !== peg$FAILED) {\r\n            rule$expects(peg$e5);\r\n            if (input.charCodeAt(peg$currPos) === 40) {\r\n              s2 = peg$c5;\r\n              peg$currPos++;\r\n            } else {\r\n              s2 = peg$FAILED;\r\n            }\r\n            if (s2 !== peg$FAILED) {\r\n              s3 = peg$parseExpression();\r\n              if (s3 !== peg$FAILED) {\r\n                rule$expects(peg$e6);\r\n                if (input.charCodeAt(peg$currPos) === 41) {\r\n                  s4 = peg$c6;\r\n                  peg$currPos++;\r\n                } else {\r\n                  s4 = peg$FAILED;\r\n                }\r\n                if (s4 !== peg$FAILED) {\r\n                  peg$savedPos = s0;\r\n                  s0 = peg$f3(s1, s3);\r\n                } else {\r\n                  peg$currPos = s0;\r\n                  s0 = peg$FAILED;\r\n                }\r\n              } else {\r\n                peg$currPos = s0;\r\n                s0 = peg$FAILED;\r\n              }\r\n            } else {\r\n              peg$currPos = s0;\r\n              s0 = peg$FAILED;\r\n            }\r\n          } else {\r\n            peg$currPos = s0;\r\n            s0 = peg$FAILED;\r\n          }\r\n          if (s0 === peg$FAILED) {\r\n            s0 = peg$parseIdentifier();\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    return s0;\r\n  }\r\n\r\n  function peg$parseFloat() {\r\n    var s0, s1, s2, s3, s4, s5;\r\n\r\n    var rule$expects = function (expected) {\r\n      if (peg$silentFails === 0) peg$expect(expected);\r\n    }\r\n\r\n    rule$expects(peg$e7);\r\n    peg$silentFails++;\r\n    s0 = peg$currPos;\r\n    s1 = [];\r\n    if (peg$r0.test(input.charAt(peg$currPos))) {\r\n      s2 = input.charAt(peg$currPos);\r\n      peg$currPos++;\r\n    } else {\r\n      s2 = peg$FAILED;\r\n    }\r\n    while (s2 !== peg$FAILED) {\r\n      s1.push(s2);\r\n      if (peg$r0.test(input.charAt(peg$currPos))) {\r\n        s2 = input.charAt(peg$currPos);\r\n        peg$currPos++;\r\n      } else {\r\n        s2 = peg$FAILED;\r\n      }\r\n    }\r\n    s2 = [];\r\n    if (peg$r1.test(input.charAt(peg$currPos))) {\r\n      s3 = input.charAt(peg$currPos);\r\n      peg$currPos++;\r\n    } else {\r\n      s3 = peg$FAILED;\r\n    }\r\n    if (s3 !== peg$FAILED) {\r\n      while (s3 !== peg$FAILED) {\r\n        s2.push(s3);\r\n        if (peg$r1.test(input.charAt(peg$currPos))) {\r\n          s3 = input.charAt(peg$currPos);\r\n          peg$currPos++;\r\n        } else {\r\n          s3 = peg$FAILED;\r\n        }\r\n      }\r\n    } else {\r\n      s2 = peg$FAILED;\r\n    }\r\n    if (s2 !== peg$FAILED) {\r\n      if (input.length > peg$currPos) {\r\n        s3 = input.charAt(peg$currPos);\r\n        peg$currPos++;\r\n      } else {\r\n        s3 = peg$FAILED;\r\n      }\r\n      if (s3 !== peg$FAILED) {\r\n        s4 = [];\r\n        if (peg$r1.test(input.charAt(peg$currPos))) {\r\n          s5 = input.charAt(peg$currPos);\r\n          peg$currPos++;\r\n        } else {\r\n          s5 = peg$FAILED;\r\n        }\r\n        if (s5 !== peg$FAILED) {\r\n          while (s5 !== peg$FAILED) {\r\n            s4.push(s5);\r\n            if (peg$r1.test(input.charAt(peg$currPos))) {\r\n              s5 = input.charAt(peg$currPos);\r\n              peg$currPos++;\r\n            } else {\r\n              s5 = peg$FAILED;\r\n            }\r\n          }\r\n        } else {\r\n          s4 = peg$FAILED;\r\n        }\r\n        if (s4 !== peg$FAILED) {\r\n          peg$savedPos = s0;\r\n          s0 = peg$f4();\r\n        } else {\r\n          peg$currPos = s0;\r\n          s0 = peg$FAILED;\r\n        }\r\n      } else {\r\n        peg$currPos = s0;\r\n        s0 = peg$FAILED;\r\n      }\r\n    } else {\r\n      peg$currPos = s0;\r\n      s0 = peg$FAILED;\r\n    }\r\n    peg$silentFails--;\r\n\r\n    return s0;\r\n  }\r\n\r\n  function peg$parseInteger() {\r\n    var s0, s1, s2, s3;\r\n\r\n    var rule$expects = function (expected) {\r\n      if (peg$silentFails === 0) peg$expect(expected);\r\n    }\r\n\r\n    rule$expects(peg$e8);\r\n    peg$silentFails++;\r\n    s0 = peg$currPos;\r\n    s1 = [];\r\n    if (peg$r0.test(input.charAt(peg$currPos))) {\r\n      s2 = input.charAt(peg$currPos);\r\n      peg$currPos++;\r\n    } else {\r\n      s2 = peg$FAILED;\r\n    }\r\n    while (s2 !== peg$FAILED) {\r\n      s1.push(s2);\r\n      if (peg$r0.test(input.charAt(peg$currPos))) {\r\n        s2 = input.charAt(peg$currPos);\r\n        peg$currPos++;\r\n      } else {\r\n        s2 = peg$FAILED;\r\n      }\r\n    }\r\n    s2 = [];\r\n    if (peg$r1.test(input.charAt(peg$currPos))) {\r\n      s3 = input.charAt(peg$currPos);\r\n      peg$currPos++;\r\n    } else {\r\n      s3 = peg$FAILED;\r\n    }\r\n    if (s3 !== peg$FAILED) {\r\n      while (s3 !== peg$FAILED) {\r\n        s2.push(s3);\r\n        if (peg$r1.test(input.charAt(peg$currPos))) {\r\n          s3 = input.charAt(peg$currPos);\r\n          peg$currPos++;\r\n        } else {\r\n          s3 = peg$FAILED;\r\n        }\r\n      }\r\n    } else {\r\n      s2 = peg$FAILED;\r\n    }\r\n    if (s2 !== peg$FAILED) {\r\n      peg$savedPos = s0;\r\n      s0 = peg$f5();\r\n    } else {\r\n      peg$currPos = s0;\r\n      s0 = peg$FAILED;\r\n    }\r\n    peg$silentFails--;\r\n\r\n    return s0;\r\n  }\r\n\r\n  function peg$parseIdentifier() {\r\n    var s0, s1, s2, s3, s4;\r\n\r\n    var rule$expects = function (expected) {\r\n      if (peg$silentFails === 0) peg$expect(expected);\r\n    }\r\n\r\n    rule$expects(peg$e9);\r\n    peg$silentFails++;\r\n    s0 = peg$currPos;\r\n    s1 = [];\r\n    if (peg$r0.test(input.charAt(peg$currPos))) {\r\n      s2 = input.charAt(peg$currPos);\r\n      peg$currPos++;\r\n    } else {\r\n      s2 = peg$FAILED;\r\n    }\r\n    while (s2 !== peg$FAILED) {\r\n      s1.push(s2);\r\n      if (peg$r0.test(input.charAt(peg$currPos))) {\r\n        s2 = input.charAt(peg$currPos);\r\n        peg$currPos++;\r\n      } else {\r\n        s2 = peg$FAILED;\r\n      }\r\n    }\r\n    if (peg$r2.test(input.charAt(peg$currPos))) {\r\n      s2 = input.charAt(peg$currPos);\r\n      peg$currPos++;\r\n    } else {\r\n      s2 = peg$FAILED;\r\n    }\r\n    if (s2 !== peg$FAILED) {\r\n      s3 = [];\r\n      if (peg$r3.test(input.charAt(peg$currPos))) {\r\n        s4 = input.charAt(peg$currPos);\r\n        peg$currPos++;\r\n      } else {\r\n        s4 = peg$FAILED;\r\n      }\r\n      while (s4 !== peg$FAILED) {\r\n        s3.push(s4);\r\n        if (peg$r3.test(input.charAt(peg$currPos))) {\r\n          s4 = input.charAt(peg$currPos);\r\n          peg$currPos++;\r\n        } else {\r\n          s4 = peg$FAILED;\r\n        }\r\n      }\r\n      peg$savedPos = s0;\r\n      s0 = peg$f6();\r\n    } else {\r\n      peg$currPos = s0;\r\n      s0 = peg$FAILED;\r\n    }\r\n    peg$silentFails--;\r\n\r\n    return s0;\r\n  }\r\n\r\n  function peg$parse_() {\r\n    var s0, s1;\r\n\r\n    var rule$expects = function (expected) {\r\n      if (peg$silentFails === 0) peg$expect(expected);\r\n    }\r\n\r\n    rule$expects(peg$e10);\r\n    peg$silentFails++;\r\n    s0 = [];\r\n    if (peg$r4.test(input.charAt(peg$currPos))) {\r\n      s1 = input.charAt(peg$currPos);\r\n      peg$currPos++;\r\n    } else {\r\n      s1 = peg$FAILED;\r\n    }\r\n    while (s1 !== peg$FAILED) {\r\n      s0.push(s1);\r\n      if (peg$r4.test(input.charAt(peg$currPos))) {\r\n        s1 = input.charAt(peg$currPos);\r\n        peg$currPos++;\r\n      } else {\r\n        s1 = peg$FAILED;\r\n      }\r\n    }\r\n    peg$silentFails--;\r\n\r\n    return s0;\r\n  }\r\n\r\n\r\n      function makeNode(lhs, rhs, op) {\r\n        if (typeof lhs === 'number' && typeof rhs === 'number') {\r\n          switch(op) {\r\n            case '+':\r\n              return lhs + rhs;\r\n            case '-':\r\n              return lhs - rhs;\r\n            case '*':\r\n              return lhs * rhs;\r\n            case '/':\r\n              return lhs / rhs;\r\n            case '**':\r\n              return Math.pow(lhs, rhs);\r\n            default:\r\n              break;\r\n          }\r\n        }\r\n\r\n        return {\r\n          lhs: lhs,\r\n          rhs: rhs,\r\n          op: op\r\n        };\r\n      }\r\n\r\n\r\n  peg$begin();\r\n  peg$result = peg$startRuleFunction();\r\n\r\n  if (peg$result !== peg$FAILED && peg$currPos === input.length) {\r\n    return peg$result;\r\n  } else {\r\n    if (peg$result !== peg$FAILED && peg$currPos < input.length) {\r\n      peg$expect(peg$endExpectation());\r\n    }\r\n\r\n    throw peg$buildError();\r\n  }\r\n}\r\n\r\nexport { peg$SyntaxError as SyntaxError, peg$parse as parse }","/**\r\n * The main plotty module.\r\n * @module plotty\r\n * @name plotty\r\n * @author: Daniel Santillan\r\n */\r\n\r\n/**\r\n * @constant\r\n */\r\nimport { colorscales } from './colorscales';\r\nimport { parse as parseArithmetics } from './arithmetics-parser';\r\nimport { ColorScaleNames, DataSet, PlotOptions, RenderColorType, TypedArray } from './typing';\r\n\r\nfunction hasOwnProperty(obj: any, prop: string) {\r\n  return Object.prototype.hasOwnProperty.call(obj, prop);\r\n}\r\n\r\nfunction defaultFor(arg: any, val: any) { return typeof arg !== 'undefined' ? arg : val; }\r\n\r\nfunction create3DContext(canvas: HTMLCanvasElement, optAttribs: { premultipliedAlpha: boolean; }) {\r\n  const names = ['webgl', 'experimental-webgl'];\r\n  let context: WebGLRenderingContext | null= null;\r\n  for (let ii = 0; ii < names.length; ++ii) {\r\n    try {\r\n      context = canvas.getContext(names[ii] as any, optAttribs) as any as WebGLRenderingContext;\r\n    } catch(e) {}\r\n    if (context) {\r\n      break;\r\n    }\r\n  }\r\n  if (!context || !context.getExtension('OES_texture_float')) {\r\n    return null;\r\n  }\r\n  return context;\r\n}\r\n\r\nfunction createProgram(gl: WebGLRenderingContext, vertexShaderSource: string, fragmentShaderSource: string) {\r\n  // create the shader program\r\n  const vertexShader = gl.createShader(gl.VERTEX_SHADER);\r\n  gl.shaderSource(vertexShader, vertexShaderSource);\r\n  gl.compileShader(vertexShader);\r\n  if (!gl.getShaderParameter(vertexShader, gl.COMPILE_STATUS)) {\r\n    throw new Error(gl.getShaderInfoLog(vertexShader));\r\n  }\r\n\r\n  const fragmentShader = gl.createShader(gl.FRAGMENT_SHADER);\r\n  gl.shaderSource(fragmentShader, fragmentShaderSource);\r\n  gl.compileShader(fragmentShader);\r\n  if (!gl.getShaderParameter(fragmentShader, gl.COMPILE_STATUS)) {\r\n    throw new Error(gl.getShaderInfoLog(fragmentShader));\r\n  }\r\n\r\n  const program = gl.createProgram();\r\n  gl.attachShader(program, vertexShader);\r\n  gl.attachShader(program, fragmentShader);\r\n  gl.linkProgram(program);\r\n  return program;\r\n}\r\n\r\nfunction setRectangle(gl: WebGLRenderingContext, x: number, y: number, width: number, height: number) {\r\n  const x1 = x;\r\n  const x2 = x + width;\r\n  const y1 = y;\r\n  const y2 = y + height;\r\n  gl.bufferData(gl.ARRAY_BUFFER, new Float32Array([\r\n    x1, y1,\r\n    x2, y1,\r\n    x1, y2,\r\n    x1, y2,\r\n    x2, y1,\r\n    x2, y2]), gl.STATIC_DRAW);\r\n}\r\n\r\nfunction createDataset(gl: WebGLRenderingContext, id: string, data: TypedArray, width: number, height: number) {\r\n  let textureData: WebGLTexture;\r\n  if (gl) {\r\n    gl.viewport(0, 0, width, height);\r\n    textureData = gl.createTexture();\r\n    gl.bindTexture(gl.TEXTURE_2D, textureData);\r\n\r\n    // Set the parameters so we can render any size image.\r\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\r\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\r\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\r\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\r\n\r\n    // Upload the image into the texture.\r\n    gl.texImage2D(gl.TEXTURE_2D, 0,\r\n      gl.LUMINANCE,\r\n      width, height, 0,\r\n      gl.LUMINANCE, gl.FLOAT, new Float32Array(data)\r\n    );\r\n  }\r\n  return { textureData, width, height, data, id };\r\n}\r\n\r\nfunction destroyDataset(gl: WebGLRenderingContext, dataset: DataSet) {\r\n  if (gl) {\r\n    gl.deleteTexture(dataset.textureData);\r\n  }\r\n}\r\n\r\n/**\r\n * Add a new colorscale to the list of available colorscales.\r\n * @memberof module:plotty\r\n * @param {String} name the name of the newly defined color scale\r\n * @param {String[]} colors the array containing the colors. Each entry shall\r\n *                          adhere to the CSS color definitions.\r\n * @param {Number[]} positions the value position for each of the colors\r\n */\r\nfunction addColorScale(name: string, colors: string[], positions: number[]) {\r\n  if (colors.length !== positions.length) {\r\n    throw new Error('Invalid color scale.');\r\n  }\r\n  colorscales[name] = { colors, positions };\r\n}\r\n\r\n/**\r\n * Render the colorscale to the specified canvas.\r\n * @memberof module:plotty\r\n * @param {String} name the name of the color scale to render\r\n * @param {HTMLCanvasElement} canvas the canvas to render to\r\n * @param {RenderColorType} type the type of color scale to render, either \"continuous\" or \"discrete\"\r\n */\r\nfunction renderColorScaleToCanvas(name: string, canvas: HTMLCanvasElement, type: RenderColorType = 'continuous') {\r\n  /* eslint-disable no-param-reassign */\r\n  const csDef = colorscales[name];\r\n  canvas.height = 1;\r\n  const ctx = canvas.getContext('2d');\r\n\r\n  if (Object.prototype.toString.call(csDef) === '[object Object]') {\r\n    canvas.width = 256;\r\n    const gradient = ctx.createLinearGradient(0, 0, 256, 1);\r\n\r\n    if (type === 'continuous') {\r\n      for (let i = 0; i < csDef.colors.length; ++i) {\r\n        gradient.addColorStop(csDef.positions[i], csDef.colors[i]);\r\n      }\r\n    } else if (type === 'discrete') {\r\n      for (let i = 0; i < csDef.colors.length - 1; ++i) {\r\n        gradient.addColorStop(csDef.positions[i], csDef.colors[i]);\r\n        gradient.addColorStop(csDef.positions[i + 1] - 0.001, csDef.colors[i]);\r\n      }\r\n      gradient.addColorStop(1, csDef.colors[csDef.colors.length - 1]);\r\n    } else {\r\n      throw new Error('Invalid color scale type.');\r\n    }\r\n\r\n    ctx.fillStyle = gradient;\r\n    ctx.fillRect(0, 0, 256, 1);\r\n  } else if (Object.prototype.toString.call(csDef) === '[object Uint8Array]') {\r\n    canvas.width = 256;\r\n    const imgData = ctx.createImageData(256, 1);\r\n    imgData.data.set(csDef);\r\n    ctx.putImageData(imgData, 0, 0);\r\n  } else {\r\n    throw new Error('Color scale not defined.');\r\n  }\r\n  /* eslint-enable no-param-reassign */\r\n}\r\n\r\nconst vertexShaderSource = `\r\nattribute vec2 a_position;\r\nattribute vec2 a_texCoord;\r\nuniform mat3 u_matrix;\r\nuniform vec2 u_resolution;\r\nvarying vec2 v_texCoord;\r\nvoid main() {\r\n  // apply transformation matrix\r\n  vec2 position = (u_matrix * vec3(a_position, 1)).xy;\r\n  // convert the rectangle from pixels to 0.0 to 1.0\r\n  vec2 zeroToOne = position / u_resolution;\r\n  // convert from 0->1 to 0->2\r\n  vec2 zeroToTwo = zeroToOne * 2.0;\r\n  // convert from 0->2 to -1->+1 (clipspace)\r\n  vec2 clipSpace = zeroToTwo - 1.0;\r\n  gl_Position = vec4(clipSpace * vec2(1, -1), 0, 1);\r\n  // pass the texCoord to the fragment shader\r\n  // The GPU will interpolate this value between points.\r\n  v_texCoord = a_texCoord;\r\n}`;\r\n\r\n\r\n// Definition of fragment shader\r\nconst fragmentShaderSource = `\r\nprecision mediump float;\r\n// our texture\r\nuniform sampler2D u_textureData;\r\nuniform sampler2D u_textureScale;\r\nuniform vec2 u_textureSize;\r\nuniform vec2 u_domain;\r\nuniform vec2 u_display_range;\r\nuniform bool u_apply_display_range;\r\nuniform float u_noDataValue;\r\nuniform bool u_clampLow;\r\nuniform bool u_clampHigh;\r\n// the texCoords passed in from the vertex shader.\r\nvarying vec2 v_texCoord;\r\n\r\nbool isnan( float val ) {\r\n  return ( val < 0.0 || 0.0 < val || val == 0.0 ) ? false : true;\r\n}\r\n\r\nvoid main() {\r\n  vec2 onePixel = vec2(1.0, 1.0) / u_textureSize;\r\n  float value = texture2D(u_textureData, v_texCoord)[0];\r\n  if(value < -3.402823466e+38) // Check for possible NaN value\r\n    gl_FragColor = vec4(0.0, 0, 0, 0.0);\r\n  else if (value == u_noDataValue || isnan(value))\r\n    gl_FragColor = vec4(0.0, 0, 0, 0.0);\r\n  else if (u_apply_display_range && (value < u_display_range[0] || value >= u_display_range[1]))\r\n        gl_FragColor = vec4(0.0, 0, 0, 0.0);\r\n  else if ((!u_clampLow && value < u_domain[0]) || (!u_clampHigh && value > u_domain[1]))\r\n    gl_FragColor = vec4(0, 0, 0, 0);\r\n  else {\r\n    float normalisedValue = (value - u_domain[0]) / (u_domain[1] - u_domain[0]);\r\n    gl_FragColor = texture2D(u_textureScale, vec2(normalisedValue, 0));\r\n  }\r\n}`;\r\n\r\n/**\r\n * The raster plot class.\r\n * @memberof module:plotty\r\n * @constructor\r\n * @param {Object} options the options to pass to the plot.\r\n * @param {HTMLCanvasElement} [options.canvas=document.createElement('canvas')]\r\n *        the canvas to render to\r\n * @param {TypedArray} [options.data] the raster data to render\r\n * @param {Number} [options.width] the width of the input raster\r\n * @param {Number} [options.height] the height of the input raster\r\n * @param {Object[]} [options.datasets=undefined] a list of named datasets. each\r\n *         must have 'id', 'data', 'width' and 'height'.\r\n * @param {(HTMLCanvasElement|HTMLImageElement)} [options.colorScaleImage=undefined]\r\n *        the color scale image to use\r\n * @param {String} [options.colorScale] the name of a named color scale to use\r\n * @param {Number[]} [options.domain=[0, 1]] the value domain to scale the color\r\n * @param {Number[]} [options.displayRange=[0, 1]] range of values that will be\r\n *        rendered, values outside of the range will be transparent\r\n * @param {Boolean} [options.applyDisplayRange=false] set if displayRange should\r\n *        be used\r\n * @param {Boolean} [options.clampLow=true] whether or now values below the domain\r\n *        shall be clamped\r\n * @param {Boolean} [options.clampHigh=clampLow] whether or now values above the\r\n * domain shall be clamped (if not defined defaults to clampLow value)\r\n * @param {Number} [options.noDataValue = undefined] the no-data value that shall\r\n *         always be hidden\r\n * @param {Array} [options.matrix=[1, 0, 0, 0, 1, 0, 0, 0, 1 ]] Transformation matrix\r\n * @param {Boolean} [options.useWebGL=true] plotty can also function with pure javascript\r\n *         but it is much slower then using WebGl rendering\r\n *\r\n */\r\nclass plot {\r\n  canvas: HTMLCanvasElement;\r\n  currentDataset: DataSet;\r\n  datasetCollection: Record<string, DataSet>;\r\n  gl: WebGLRenderingContext | null;\r\n  program: WebGLProgram;\r\n  texCoordBuffer: WebGLBuffer;\r\n  ctx: CanvasRenderingContext2D;\r\n  displayRange: number[];\r\n  applyDisplayRange: boolean;\r\n  matrix: number[];\r\n  colorScaleImage: HTMLCanvasElement | HTMLImageElement;\r\n  domain: number[];\r\n  colorScaleCanvas: HTMLCanvasElement;\r\n  name: ColorScaleNames;\r\n  clampLow: boolean;\r\n  clampHigh: boolean;\r\n  textureScale: WebGLTexture;\r\n  noDataValue: number;\r\n  expressionAst: string;\r\n  colorType: RenderColorType = 'continuous';\r\n  constructor(options: PlotOptions) {\r\n    this.datasetCollection = {};\r\n    this.currentDataset = null;\r\n\r\n    this.setCanvas(options.canvas);\r\n    this.setColorType(options.type);\r\n    // check if a webgl context is requested and available and set up the shaders\r\n\r\n    if (defaultFor(options.useWebGL, true)) {\r\n      // Try to create a webgl context in a temporary canvas to see if webgl and\r\n      // required OES_texture_float is supported\r\n      const gl = create3DContext(this.canvas, { premultipliedAlpha: false });\r\n      if (gl !== null) {\r\n        this.gl = gl;\r\n        this.program = createProgram(gl, vertexShaderSource, fragmentShaderSource);\r\n        gl.useProgram(this.program);\r\n\r\n        // look up where the vertex data needs to go.\r\n        const texCoordLocation = gl.getAttribLocation(this.program, 'a_texCoord');\r\n\r\n        // provide texture coordinates for the rectangle.\r\n        this.texCoordBuffer = gl.createBuffer();\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, this.texCoordBuffer);\r\n        gl.bufferData(gl.ARRAY_BUFFER, new Float32Array([\r\n          0.0, 0.0,\r\n          1.0, 0.0,\r\n          0.0, 1.0,\r\n          0.0, 1.0,\r\n          1.0, 0.0,\r\n          1.0, 1.0]), gl.STATIC_DRAW);\r\n        gl.enableVertexAttribArray(texCoordLocation);\r\n        gl.vertexAttribPointer(texCoordLocation, 2, gl.FLOAT, false, 0, 0);\r\n      } else {\r\n        // Fall back to 2d context\r\n        this.ctx = this.canvas.getContext('2d');\r\n      }\r\n    } else {\r\n      this.ctx = this.canvas.getContext('2d');\r\n    }\r\n\r\n    if (options.colorScaleImage) {\r\n      this.setColorScaleImage(options.colorScaleImage);\r\n    } else {\r\n      this.setColorScale(defaultFor(options.colorScale, 'viridis'));\r\n    }\r\n    this.setDomain(defaultFor(options.domain, [0, 1]));\r\n    this.displayRange = defaultFor(options.displayRange, [0, 1]);\r\n    this.applyDisplayRange = defaultFor(options.applyDisplayRange, false);\r\n    this.setClamp(defaultFor(options.clampLow, true), options.clampHigh);\r\n    this.setNoDataValue(options.noDataValue);\r\n\r\n    if (options.data) {\r\n      const l = options.data.length;\r\n      this.setData(\r\n        options.data,\r\n        defaultFor(options.width, options.data[l - 2]),\r\n        defaultFor(options.height, options.data[l - 2])\r\n      );\r\n    }\r\n\r\n    if (options.datasets) {\r\n      for (let i = 0; i < options.datasets.length; ++i) {\r\n        const ds = options.datasets[i];\r\n        this.addDataset(ds.id, ds.data, ds.width, ds.height);\r\n      }\r\n    }\r\n\r\n    if (options.matrix) {\r\n      this.matrix = options.matrix;\r\n    } else {  // if no matrix is provided, supply identity matrix\r\n      this.matrix = [\r\n        1, 0, 0,\r\n        0, 1, 0,\r\n        0, 0, 1,\r\n      ];\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get the raw data from the currently selected dataset.\r\n   * @returns {TypedArray} the data of the currently selected dataset.\r\n   */\r\n  getData(): TypedArray {\r\n    const dataset = this.currentDataset;\r\n    if (!dataset) {\r\n      throw new Error('No dataset available.');\r\n    }\r\n    return dataset.data;\r\n  }\r\n\r\n  /**\r\n   * Query the raw raster data at the specified coordinates.\r\n   * @param {Number} x the x coordinate\r\n   * @param {Number} y the y coordinate\r\n   * @returns {Number} the value at the specified coordinates\r\n   */\r\n  atPoint(x: number, y: number): number {\r\n    const dataset = this.currentDataset;\r\n    if (!dataset) {\r\n      throw new Error('No dataset available.');\r\n    } else if (x >= dataset.width || y >= dataset.height) {\r\n      throw new Error('Coordinates are outside of image bounds.');\r\n    }\r\n    return dataset.data[(y * dataset.width) + x];\r\n  }\r\n\r\n  /**\r\n   * Set the raw raster data to be rendered. This creates a new unnamed dataset.\r\n   * @param {TypedArray} data the raw raster data. This can be a typed array of\r\n   *                          any type, but will be coerced to Float32Array when\r\n   *                          beeing rendered.\r\n   * @param {number} width the width of the raster image\r\n   * @param {number} height the height of the data\r\n   */\r\n  setData(data: TypedArray, width: number, height: number) {\r\n    if (this.currentDataset && this.currentDataset.id === null) {\r\n      destroyDataset(this.gl, this.currentDataset);\r\n    }\r\n    this.currentDataset = createDataset(this.gl, null, data, width, height);\r\n  }\r\n\r\n  /**\r\n   * Add a new named dataset. The semantics are the same as with @see setData.\r\n   * @param {string} id the identifier for the dataset.\r\n   * @param {TypedArray} data the raw raster data. This can be a typed array of\r\n   *                          any type, but will be coerced to Float32Array when\r\n   *                          beeing rendered.\r\n   * @param {number} width the width of the raster image\r\n   * @param {number} height the height of the data\r\n   */\r\n  addDataset(id: string, data: TypedArray, width: number, height: number) {\r\n    if (this.datasetAvailable(id)) {\r\n      throw new Error(`There is already a dataset registered with id '${id}'`);\r\n    }\r\n    this.datasetCollection[id] = createDataset(this.gl, id, data, width, height);\r\n    if (!this.currentDataset) {\r\n      this.currentDataset = this.datasetCollection[id];\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Set the current dataset to be rendered.\r\n   * @param {string} id the identifier of the dataset to be rendered.\r\n   */\r\n  setCurrentDataset(id: string) {\r\n    if (!this.datasetAvailable(id)) {\r\n      throw new Error(`No such dataset registered: '${id}'`);\r\n    }\r\n    if (this.currentDataset && this.currentDataset.id === null) {\r\n      destroyDataset(this.gl, this.currentDataset);\r\n    }\r\n    this.currentDataset = this.datasetCollection[id];\r\n  }\r\n\r\n  /**\r\n   * Remove the dataset.\r\n   * @param {string} id the identifier of the dataset to be removed.\r\n   */\r\n  removeDataset(id: string) {\r\n    const dataset = this.datasetCollection[id];\r\n    if (!dataset) {\r\n      throw new Error(`No such dataset registered: '${id}'`);\r\n    }\r\n    destroyDataset(this.gl, dataset);\r\n    if (this.currentDataset === dataset) {\r\n      this.currentDataset = null;\r\n    }\r\n    delete this.datasetCollection[id];\r\n  }\r\n\r\n  removeAllDataset() {\r\n    Object.keys(this.datasetCollection).forEach(id => this.removeDataset(id));\r\n  }\r\n\r\n  /**\r\n   * Check if the dataset is available.\r\n   * @param {string} id the identifier of the dataset to check.\r\n   * @returns {Boolean} whether or not a dataset with that identifier is defined\r\n   */\r\n  datasetAvailable(id: string): boolean {\r\n    return hasOwnProperty(this.datasetCollection, id);\r\n  }\r\n\r\n  /**\r\n   * Retrieve the rendered color scale image.\r\n   * @returns {(HTMLCanvasElement|HTMLImageElement)} the canvas or image element\r\n   *                                                 for the rendered color scale\r\n   */\r\n  getColorScaleImage(): (HTMLCanvasElement | HTMLImageElement) {\r\n    return this.colorScaleImage;\r\n  }\r\n\r\n  /**\r\n   * Set the canvas to draw to. When no canvas is supplied, a new canvas element\r\n   * is created.\r\n   * @param {HTMLCanvasElement} [canvas] the canvas element to render to.\r\n   */\r\n  setCanvas(canvas: HTMLCanvasElement) {\r\n    this.canvas = canvas || document.createElement('canvas');\r\n  }\r\n\r\n  setColorType(type: RenderColorType) {\r\n    this.colorType = type ?? 'continuous';\r\n  }\r\n\r\n  /**\r\n   * Set the new value domain for the rendering.\r\n   * @param {number[]} domain the value domain range in the form [low, high]\r\n   */\r\n  setDomain(domain: number[]) {\r\n    if (!domain || domain.length !== 2) {\r\n      throw new Error('Invalid domain specified.');\r\n    }\r\n    this.domain = domain;\r\n  }\r\n\r\n  /**\r\n   * Set the display range that will be rendered, values outside of the range\r\n   * will not be rendered (transparent)\r\n   * @param {number[]} displayRange range array in the form [min, max]\r\n   */\r\n  setDisplayRange(displayRange: number[]) {\r\n    if (!displayRange || displayRange.length !== 2) {\r\n      throw new Error('Invalid view range specified.');\r\n    }\r\n    this.displayRange = displayRange;\r\n    // When setting view range automatically enable the apply flag\r\n    this.applyDisplayRange = true;\r\n  }\r\n\r\n  /**\r\n   * Get the canvas that is currently rendered to.\r\n   * @returns {HTMLCanvasElement} the canvas that is currently rendered to.\r\n   */\r\n  getCanvas(): HTMLCanvasElement {\r\n    return this.canvas;\r\n  }\r\n\r\n  /**\r\n   * Set the currently selected color scale.\r\n   * @param {ColorScaleNames} name the name of the colorscale. Must be registered.\r\n   */\r\n  setColorScale(name: ColorScaleNames) {\r\n    if (!hasOwnProperty(colorscales, name)) {\r\n      throw new Error(`No such color scale '${name}'`);\r\n    }\r\n    if (!this.colorScaleCanvas) {\r\n      // Create single canvas to render colorscales\r\n      this.colorScaleCanvas = document.createElement('canvas');\r\n      this.colorScaleCanvas.width = 256;\r\n      this.colorScaleCanvas.height = 1;\r\n    }\r\n    renderColorScaleToCanvas(name, this.colorScaleCanvas, this.colorType);\r\n    this.name = name;\r\n    this.setColorScaleImage(this.colorScaleCanvas);\r\n  }\r\n\r\n  /**\r\n   * Set the clamping for the lower and the upper border of the values. When\r\n   * clamping is enabled for either side, the values below or above will be\r\n   * clamped to the minimum/maximum color.\r\n   * @param {Boolean} clampLow whether or not the minimum shall be clamped.\r\n   * @param {Boolean} clampHigh whether or not the maxmimum shall be clamped.\r\n   *                            defaults to clampMin.\r\n   */\r\n  setClamp(clampLow: boolean, clampHigh: boolean) {\r\n    this.clampLow = clampLow;\r\n    this.clampHigh = (typeof clampHigh !== 'undefined') ? clampHigh : clampLow;\r\n  }\r\n\r\n  /**\r\n   * Set the currently selected color scale as an image or canvas.\r\n   * @param {(HTMLCanvasElement|HTMLImageElement)} colorScaleImage the new color\r\n   *                                                               scale image\r\n   */\r\n  setColorScaleImage(colorScaleImage: (HTMLCanvasElement | HTMLImageElement)) {\r\n    this.colorScaleImage = colorScaleImage;\r\n    const gl = this.gl;\r\n    if (gl) {\r\n      if (this.textureScale) {\r\n        gl.deleteTexture(this.textureScale);\r\n      }\r\n      this.textureScale = gl.createTexture();\r\n      gl.bindTexture(gl.TEXTURE_2D, this.textureScale);\r\n\r\n      // Set the parameters so we can render any size image.\r\n      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\r\n      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\r\n      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\r\n      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\r\n      // Upload the image into the texture.\r\n      gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, colorScaleImage);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Set the no-data-value: a special value that will be rendered transparent.\r\n   * @param {number} noDataValue the no-data-value. Use null to clear a\r\n   *                            previously set no-data-value.\r\n   */\r\n  setNoDataValue(noDataValue: number) {\r\n    this.noDataValue = noDataValue;\r\n  }\r\n\r\n  /**\r\n   * Render the map to the specified canvas with the given settings.\r\n   */\r\n  render() {\r\n    const canvas = this.canvas;\r\n    const dataset = this.currentDataset;\r\n\r\n    canvas.width = dataset.width;\r\n    canvas.height = dataset.height;\r\n\r\n    let ids = null;\r\n    if (this.expressionAst) {\r\n      const idsSet = new Set([]);\r\n      const getIds = (node: any) => {\r\n        if (typeof node === 'string') {\r\n          // ids should not contain unary operators\r\n          idsSet.add(node.replace(new RegExp(/[+-]/, 'g'), ''));\r\n        }\r\n        if (typeof node.lhs === 'string') {\r\n          idsSet.add(node.lhs.replace(new RegExp(/[+-]/, 'g'), ''));\r\n        } else if (typeof node.lhs === 'object') {\r\n          getIds(node.lhs);\r\n        }\r\n        if (typeof node.rhs === 'string') {\r\n          idsSet.add(node.rhs.replace(new RegExp(/[+-]/, 'g'), ''));\r\n        } else if (typeof node.rhs === 'object') {\r\n          getIds(node.rhs);\r\n        }\r\n      };\r\n      getIds(this.expressionAst);\r\n      ids = Array.from(idsSet);\r\n    }\r\n\r\n    let program = null;\r\n\r\n    if (this.gl) {\r\n      const gl = this.gl;\r\n      gl.viewport(0, 0, dataset.width, dataset.height);\r\n\r\n      if (this.expressionAst) {\r\n        const vertexShaderSourceExpressionTemplate = `\r\n          attribute vec2 a_position;\r\n          attribute vec2 a_texCoord;\r\n          uniform mat3 u_matrix;\r\n          uniform vec2 u_resolution;\r\n          varying vec2 v_texCoord;\r\n          void main() {\r\n            // apply transformation matrix\r\n            vec2 position = (u_matrix * vec3(a_position, 1)).xy;\r\n            // convert the rectangle from pixels to 0.0 to 1.0\r\n            vec2 zeroToOne = position / u_resolution;\r\n            // convert from 0->1 to 0->2\r\n            vec2 zeroToTwo = zeroToOne * 2.0;\r\n            // convert from 0->2 to -1->+1 (clipspace)\r\n            vec2 clipSpace = zeroToTwo - 1.0;\r\n            gl_Position = vec4(clipSpace * vec2(1, -1), 0, 1);\r\n            // pass the texCoord to the fragment shader\r\n            // The GPU will interpolate this value between points.\r\n            v_texCoord = a_texCoord;\r\n          }`;\r\n        const expressionReducer = (node: any) => {\r\n          if (typeof node === 'object') {\r\n            if (node.op === '**') {\r\n              // math power operator substitution\r\n              return `pow(${expressionReducer(node.lhs)}, ${expressionReducer(node.rhs)})`;\r\n            }\r\n            if (node.fn) {\r\n              return `(${node.fn}(${expressionReducer(node.lhs)}))`;\r\n            }\r\n            return `(${expressionReducer(node.lhs)} ${node.op} ${expressionReducer(node.rhs)})`;\r\n          } else if (typeof node === 'string') {\r\n            return `${node}_value`;\r\n          }\r\n          return `float(${node})`;\r\n        };\r\n\r\n        const compiledExpression = expressionReducer(this.expressionAst);\r\n\r\n        // Definition of fragment shader\r\n        const fragmentShaderSourceExpressionTemplate = `\r\n          precision mediump float;\r\n          // our texture\r\n          uniform sampler2D u_textureScale;\r\n\r\n          // add all required textures\r\n          ${ids.map((id: any) => `uniform sampler2D u_texture_${id};`).join('\\n')}\r\n\r\n          uniform vec2 u_textureSize;\r\n          uniform vec2 u_domain;\r\n          uniform vec2 u_display_range;\r\n          uniform bool u_apply_display_range;\r\n          uniform float u_noDataValue;\r\n          uniform bool u_clampLow;\r\n          uniform bool u_clampHigh;\r\n          // the texCoords passed in from the vertex shader.\r\n          varying vec2 v_texCoord;\r\n          void main() {\r\n            ${ids.map((id: any) => `float ${id}_value = texture2D(u_texture_${id}, v_texCoord)[0];`).join('\\n')}\r\n            float value = ${compiledExpression};\r\n\r\n            if (value == u_noDataValue)\r\n              gl_FragColor = vec4(0.0, 0, 0, 0.0);\r\n            else if (u_apply_display_range && (value < u_display_range[0] || value >= u_display_range[1]))\r\n              gl_FragColor = vec4(0.0, 0, 0, 0.0);\r\n            else if ((!u_clampLow && value < u_domain[0]) || (!u_clampHigh && value > u_domain[1]))\r\n              gl_FragColor = vec4(0, 0, 0, 0);\r\n            else {\r\n              float normalisedValue = (value - u_domain[0]) / (u_domain[1] - u_domain[0]);\r\n              gl_FragColor = texture2D(u_textureScale, vec2(normalisedValue, 0));\r\n            }\r\n          }`;\r\n        program = createProgram(gl, vertexShaderSource, fragmentShaderSourceExpressionTemplate);\r\n        gl.useProgram(program);\r\n\r\n        gl.uniform1i(gl.getUniformLocation(program, 'u_textureScale'), 0);\r\n        gl.activeTexture(gl.TEXTURE0);\r\n        gl.bindTexture(gl.TEXTURE_2D, this.textureScale);\r\n        for (let i = 0; i < ids.length; ++i) {\r\n          const location = i + 1;\r\n          const id = ids[i];\r\n          const ds = this.datasetCollection[id];\r\n          if (!ds) {\r\n            throw new Error(`No such dataset registered: '${id}'`);\r\n          }\r\n          gl.uniform1i(gl.getUniformLocation(program, `u_texture_${id}`), location);\r\n          gl.activeTexture(gl[`TEXTURE${location}`]);\r\n          gl.bindTexture(gl.TEXTURE_2D, ds.textureData);\r\n        }\r\n      } else {\r\n        program = this.program;\r\n        gl.useProgram(program);\r\n        // set the images\r\n        gl.uniform1i(gl.getUniformLocation(program, 'u_textureData'), 0);\r\n        gl.uniform1i(gl.getUniformLocation(program, 'u_textureScale'), 1);\r\n\r\n        gl.activeTexture(gl.TEXTURE0);\r\n        gl.bindTexture(gl.TEXTURE_2D, dataset.textureData);\r\n        gl.activeTexture(gl.TEXTURE1);\r\n        gl.bindTexture(gl.TEXTURE_2D, this.textureScale);\r\n      }\r\n      const positionLocation = gl.getAttribLocation(program, 'a_position');\r\n      const domainLocation = gl.getUniformLocation(program, 'u_domain');\r\n      const displayRangeLocation = gl.getUniformLocation(\r\n        program, 'u_display_range'\r\n      );\r\n      const applyDisplayRangeLocation = gl.getUniformLocation(\r\n        program, 'u_apply_display_range'\r\n      );\r\n      const resolutionLocation = gl.getUniformLocation(program, 'u_resolution');\r\n      const noDataValueLocation = gl.getUniformLocation(program, 'u_noDataValue');\r\n      const clampLowLocation = gl.getUniformLocation(program, 'u_clampLow');\r\n      const clampHighLocation = gl.getUniformLocation(program, 'u_clampHigh');\r\n      const matrixLocation = gl.getUniformLocation(program, 'u_matrix');\r\n\r\n      gl.uniform2f(resolutionLocation, canvas.width, canvas.height);\r\n      gl.uniform2fv(domainLocation, this.domain);\r\n      gl.uniform2fv(displayRangeLocation, this.displayRange);\r\n      gl.uniform1i(applyDisplayRangeLocation, +this.applyDisplayRange);\r\n      gl.uniform1i(clampLowLocation, +this.clampLow);\r\n      gl.uniform1i(clampHighLocation, +this.clampHigh);\r\n      gl.uniform1f(noDataValueLocation, this.noDataValue);\r\n      gl.uniformMatrix3fv(matrixLocation, false, this.matrix);\r\n\r\n      const positionBuffer = gl.createBuffer();\r\n      gl.bindBuffer(gl.ARRAY_BUFFER, positionBuffer);\r\n      gl.enableVertexAttribArray(positionLocation);\r\n      gl.vertexAttribPointer(positionLocation, 2, gl.FLOAT, false, 0, 0);\r\n\r\n      setRectangle(gl, 0, 0, canvas.width, canvas.height);\r\n\r\n      // Draw the rectangle.\r\n      gl.drawArrays(gl.TRIANGLES, 0, 6);\r\n    } else if (this.ctx) {\r\n      const ctx = this.ctx;\r\n      const w = canvas.width;\r\n      const h = canvas.height;\r\n\r\n      const imageData = ctx.createImageData(w, h);\r\n\r\n      const trange = this.domain[1] - this.domain[0];\r\n      const steps = this.colorScaleCanvas.width;\r\n      const csImageData = this.colorScaleCanvas.getContext('2d').getImageData(0, 0, steps, 1).data;\r\n      let alpha: number;\r\n\r\n      const data = dataset.data;\r\n\r\n      for (let y = 0; y < h; y++) {\r\n        for (let x = 0; x < w; x++) {\r\n          const i = (y * w) + x;\r\n          // TODO: Possible increase of performance through use of worker threads?\r\n\r\n          let c = Math.floor(((data[i] - this.domain[0]) / trange) * (steps - 1));\r\n          alpha = 255;\r\n          if (c < 0) {\r\n            c = 0;\r\n            if (!this.clampLow) {\r\n              alpha = 0;\r\n            }\r\n          } else if (c > 255) {\r\n            c = 255;\r\n            if (!this.clampHigh) {\r\n              alpha = 0;\r\n            }\r\n          }\r\n          // NaN values should be the only values that are not equal to itself\r\n          if (data[i] === this.noDataValue || data[i] !== data[i]) {\r\n            alpha = 0;\r\n          } else if (this.applyDisplayRange\r\n            && (data[i] < this.displayRange[0] || data[i] >= this.displayRange[1])) {\r\n            alpha = 0;\r\n          }\r\n\r\n          const index = ((y * w) + x) * 4;\r\n          imageData.data[index + 0] = csImageData[c * 4];\r\n          imageData.data[index + 1] = csImageData[(c * 4) + 1];\r\n          imageData.data[index + 2] = csImageData[(c * 4) + 2];\r\n          imageData.data[index + 3] = Math.min(alpha, csImageData[(c * 4) + 3]);\r\n        }\r\n      }\r\n\r\n      ctx.putImageData(imageData, 0, 0); // at coords 0,0\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Render the specified dataset with the current settings.\r\n   * @param {string} id the identifier of the dataset to render.\r\n   */\r\n  renderDataset(id: string) {\r\n    this.setCurrentDataset(id);\r\n    return this.render();\r\n  }\r\n\r\n  /**\r\n   * Get the color for the specified value.\r\n   * @param {number} val the value to query the color for.\r\n   * @returns {Array} the 4-tuple: red, green, blue, alpha in the range 0-255.\r\n   */\r\n  getColor(val: number): Array<any> {\r\n    const steps = this.colorScaleCanvas.width;\r\n    const csImageData = this.colorScaleCanvas.getContext('2d')\r\n                                             .getImageData(0, 0, steps, 1).data;\r\n    const trange = this.domain[1] - this.domain[0];\r\n    let c = Math.round(((val - this.domain[0]) / trange) * steps);\r\n    let alpha = 255;\r\n    if (c < 0) {\r\n      c = 0;\r\n      if (!this.clampLow) {\r\n        alpha = 0;\r\n      }\r\n    }\r\n    if (c > 255) {\r\n      c = 255;\r\n      if (!this.clampHigh) {\r\n        alpha = 0;\r\n      }\r\n    }\r\n\r\n    return [\r\n      csImageData[c * 4],\r\n      csImageData[(c * 4) + 1],\r\n      csImageData[(c * 4) + 2],\r\n      alpha,\r\n    ];\r\n  }\r\n  /**\r\n   * Sets a mathematical expression to be evaluated on the plot. Expression can contain mathematical operations with integer/float values, dataset identifiers or GLSL supported functions with a single parameter.\r\n   * Supported mathematical operations are: add '+', subtract '-', multiply '*', divide '/', power '**', unary plus '+a', unary minus '-a'.\r\n   * Useful GLSL functions are for example: radians, degrees, sin, asin, cos, acos, tan, atan, log2, log, sqrt, exp2, exp, abs, sign, floor, ceil, fract.\r\n   * @param {string} expression Mathematical expression. Example: '-2 * sin(3.1415 - dataset1) ** 2'\r\n   */\r\n  setExpression(expression: string) {\r\n    if (!expression || !expression.length) {\r\n      this.expressionAst = null;\r\n    } else {\r\n      this.expressionAst = parseArithmetics(expression);\r\n    }\r\n  }\r\n\r\n  destroy() {\r\n    // 在使用完WebGL上下文后，释放资源\r\n    this.gl?.deleteProgram(this.program);\r\n    this.removeAllDataset();\r\n  }\r\n}\r\n\r\n// register the symbols to be exported at the 'global' object (to be replaced by browserify)\r\nexport { plot, addColorScale, colorscales, renderColorScaleToCanvas };\r\n","import { Color } from \"cesium\";\r\n\r\nexport function getMinMax(data: number[], nodata: number) {\r\n  let min: number, max: number;\r\n  for (let j = 0; j < data.length; j += 1) {\r\n    const val = data[j];\r\n    if (val === nodata) continue;\r\n    if (min === undefined && max === undefined) {\r\n      min = max = val;\r\n      continue;\r\n    }\r\n    if (val < min) {\r\n      min = val;\r\n    } else if (val > max) {\r\n      max = val;\r\n    }\r\n  }\r\n  return {\r\n    min, max\r\n  }\r\n}\r\n\r\nexport function decimal2rgb(number: number) {\r\n  return Math.round(number * 255)\r\n}\r\n\r\nexport function getRange(bands: Record<number, {\r\n  min: number;\r\n  max: number;\r\n}>, opts: {\r\n  min?: number,\r\n  max?: number,\r\n  band: number\r\n  } | undefined) {\r\n  const band = bands[opts.band]\r\n  if (!band) {\r\n    throw new Error(`Invalid band${opts.band}`)\r\n  }\r\n  const min = opts?.min ?? +band.min;\r\n  const max = opts?.max ?? +band.max;\r\n  const range = max - min;\r\n  return { min, max, range };\r\n}\r\n\r\nexport function generateColorScale(colors: [number, string][] | string[], minMax: number[]) {\r\n  let stops: [number, string][];\r\n\r\n  if (typeof colors[0] === 'string') {\r\n    stops = (colors as string[]).map((color, index) => [index / colors.length, color])\r\n  } else {\r\n    const [min, max] = minMax;\r\n    stops = (colors as [number, string][]).map(item => [((item[0] - min) / (max - min)), item[1]])\r\n  }\r\n\r\n  stops.sort((a, b) => a[0] - b[0]);\r\n\r\n  if (stops[0][0] > 0) {\r\n    stops = [stops[0], ...stops]\r\n  }\r\n\r\n  if (stops[stops.length - 1][0] > 0) {\r\n    stops = [...stops, stops[stops.length - 1]]\r\n  }\r\n\r\n  const colorScale = {\r\n    colors: stops.map(stop => stop[1]),\r\n    positions: stops.map(stop => stop[0]),\r\n  }\r\n\r\n  return colorScale;\r\n}\r\n\r\nexport function findAndSortBandNumbers(str: string) {\r\n  const regex = /b(\\d+)/g;\r\n  const bandNumbers = new Set<number>();\r\n  let match: string[];\r\n  while ((match = regex.exec(str)) !== null) {\r\n    bandNumbers.add(parseInt(match[1]) - 1);\r\n  }\r\n  return Array.from(bandNumbers).sort((a, b) => a - b);\r\n}\r\n\r\nexport function stringColorToRgba(color: string) {\r\n  const newColor = Color.fromCssColorString(color);\r\n  const { red, green, blue, alpha } = newColor;\r\n\r\n  return [red, green, green, alpha].map(val => Math.round(val * 255));\r\n}\r\n\r\nexport function reverseArray(options: {\r\n  array: number[]; width: number; height: number;\r\n}) {\r\n  const { array, width, height } = options;\r\n  const reversedArray = [];\r\n\r\n  for (let row = height - 1; row >= 0; row--) {\r\n    const startIndex = row * width;\r\n    const endIndex = startIndex + width;\r\n    const rowArray = array.slice(startIndex, endIndex);\r\n    reversedArray.push(...rowArray);\r\n  }\r\n\r\n  return reversedArray;\r\n}","import {\r\n  Cartesian2,\r\n  Cartographic,\r\n  Math as CesiumMath,\r\n  Rectangle,\r\n  WebMercatorTilingScheme,\r\n  Cartesian3,\r\n  Ellipsoid,\r\n} from 'cesium';\r\n\r\nclass TIFFImageryProviderTilingScheme extends WebMercatorTilingScheme {\r\n  readonly nativeRectangle: Rectangle;\r\n\r\n  constructor(options?: {\r\n    ellipsoid?: Ellipsoid;\r\n    numberOfLevelZeroTilesX?: number;\r\n    numberOfLevelZeroTilesY?: number;\r\n    rectangleSouthwestInMeters?: Cartesian2;\r\n    rectangleNortheastInMeters?: Cartesian2;\r\n    /** projection function, convert [lon, lat] position to [x, y] */\r\n    project: (pos: number[]) => number[];\r\n    /** unprojection function, convert [x, y] position to [lon, lat] */\r\n    unproject: (pos: number[]) => number[];\r\n  }) {\r\n    super(options);\r\n    \r\n    const { project, unproject } = options;\r\n\r\n    this.nativeRectangle = new Rectangle(options.rectangleSouthwestInMeters.x, options.rectangleSouthwestInMeters.y, options.rectangleNortheastInMeters.x, options.rectangleNortheastInMeters.y)\r\n\r\n    // @ts-ignore\r\n    this._projection = {\r\n      ellipsoid: this.ellipsoid,\r\n      project(cartographic: Cartographic, result?: Cartesian3): Cartesian3 {\r\n        const [x, y] = project([cartographic.longitude, cartographic.latitude].map(CesiumMath.toDegrees));\r\n        const z = cartographic.height;\r\n        return Cartesian3.fromElements(x, y, z, result);\r\n      },\r\n      unproject(cartesian: Cartesian3, result?: Cartographic): Cartographic {\r\n        const [longitude, latitude] = unproject([cartesian.x, cartesian.y]);\r\n        const height = cartesian.z;\r\n        return Cartographic.fromDegrees(longitude, latitude, height, result);\r\n      },\r\n    };\r\n    \r\n    const swMeters = new Cartesian3();\r\n    options.rectangleSouthwestInMeters.clone(swMeters);\r\n    const neMeters = new Cartesian3();\r\n    options.rectangleNortheastInMeters.clone(neMeters);\r\n    const seMeters = new Cartesian3(neMeters.x, swMeters.y);\r\n    const nwMeters = new Cartesian3(swMeters.x, neMeters.y);\r\n\r\n    const southwest = this.projection.unproject(swMeters);\r\n    const southeast = this.projection.unproject(seMeters);\r\n    const northwest = this.projection.unproject(nwMeters);\r\n    const northeast = this.projection.unproject(neMeters);\r\n\r\n    // @ts-ignore\r\n    this._rectangle = Rectangle.fromCartographicArray([southwest, southeast, northwest, northeast])\r\n  }\r\n\r\n  tileXYToNativeRectangle2(\r\n    x: number,\r\n    y: number,\r\n    level: number,\r\n  ) {\r\n    const rect = this.tileXYToRectangle(x, y, level);\r\n\r\n    const projection = this.projection;\r\n    const ws = projection.project(new Cartographic(rect.west, rect.south));\r\n    const wn = projection.project(new Cartographic(rect.west, rect.north));\r\n    const en = projection.project(new Cartographic(rect.east, rect.north));\r\n    const es = projection.project(new Cartographic(rect.east, rect.south));\r\n    const positions = [ws, wn, en, es];\r\n\r\n    const xx = positions.map(pos => pos.x);\r\n    const yy = positions.map(pos => pos.y);\r\n    return new Rectangle(\r\n      Math.min(...xx),\r\n      Math.min(...yy),\r\n      Math.max(...xx),\r\n      Math.max(...yy)\r\n    );\r\n  };\r\n\r\n  tileXYToRectangle(\r\n    x: number,\r\n    y: number,\r\n    level: number,\r\n  ) {\r\n    const rect = this.tileXYToNativeRectangle(x, y, level);\r\n\r\n    const projection = this.projection;\r\n    const ws = projection.unproject(new Cartesian3(rect.west, rect.south));\r\n    const wn = projection.unproject(new Cartesian3(rect.west, rect.north));\r\n    const en = projection.unproject(new Cartesian3(rect.east, rect.north));\r\n    const es = projection.unproject(new Cartesian3(rect.east, rect.south));\r\n    const newRect = Rectangle.fromCartographicArray([ws, wn, en, es]);\r\n    if (newRect.east < newRect.west) {\r\n      newRect.east += CesiumMath.TWO_PI;\r\n    }\r\n    return newRect;\r\n  };\r\n}\r\n\r\nexport default TIFFImageryProviderTilingScheme;\r\n","export type ReprojectionOptions = {\r\n  project: (pos: number[]) => number[];\r\n  sourceBBox: [minX: number, minY: number, maxX: number, maxY: number];\r\n  targetBBox: [minX: number, minY: number, maxX: number, maxY: number];\r\n  data: number[];\r\n  sourceWidth: number;\r\n  sourceHeight: number;\r\n  targetWidth?: number;\r\n  targetHeight?: number;\r\n  nodata?: any;\r\n}\r\n\r\nfunction inRange(val: number, range: [number, number]) {\r\n  if ((val < range[0] && val < range[1]) || (val > range[0] && val > range[1])) {\r\n    return false;\r\n  } else {\r\n    return true;\r\n  }\r\n}\r\n\r\nexport function reprojection(options: ReprojectionOptions): number[] {\r\n  const { data, sourceBBox, targetBBox, project, sourceWidth, sourceHeight, nodata } = options;\r\n  const { targetWidth = sourceWidth, targetHeight = sourceHeight } = options;\r\n\r\n  const [minX, minY, maxX, maxY] = sourceBBox;\r\n\r\n  const [minLon, minLat, maxLon, maxLat] = targetBBox;\r\n  \r\n  const stepX = Math.abs(maxX - minX) / sourceWidth;\r\n  const stepY = Math.abs(maxY - minY) / sourceHeight;\r\n\r\n  const stepLon = Math.abs(maxLon - minLon) / targetWidth;\r\n  const stepLat = Math.abs(maxLat - minLat) / targetHeight;\r\n\r\n  const result = new Array(targetWidth * targetHeight).fill(nodata);\r\n\r\n  for (let i = 0; i < targetHeight; i++) {\r\n    for (let j = 0; j < targetWidth; j++) {\r\n      const lon = minLon + stepLon * (j + 0.5);\r\n      const lat = maxLat - stepLat * (i + 0.5);\r\n      const [x, y] = project([lon, lat]);\r\n\r\n      if (!inRange(x, [minX, maxX]) || !inRange(y, [minX, maxY])) {\r\n        break;\r\n      }\r\n\r\n      const indexX = ~~((x - minX) / stepX);\r\n      const indexY = ~~((maxY - y) / stepY);\r\n\r\n      const sourceVal = data[indexY * targetWidth + indexX];\r\n      const index = i * sourceWidth + j;\r\n      \r\n      result[index] = sourceVal;\r\n    }\r\n  }\r\n  return result;\r\n}","import { getRange, decimal2rgb } from \"./utils\";\r\nimport { MultiBandRenderOptions } from \"../TIFFImageryProvider\";\r\n\r\nexport type GenerateImageOptions = {\r\n  data: Float32Array[];\r\n  width: number;\r\n  height: number;\r\n  renderOptions?: MultiBandRenderOptions;\r\n  bands: Record<number, {\r\n    min: number;\r\n    max: number;\r\n  }>;\r\n  noData?: number;\r\n  colorMapping: number[][][];\r\n}\r\n\r\nexport async function generateImage(opts: GenerateImageOptions) {\r\n  const { data, width, height, renderOptions, bands, noData, colorMapping } = opts;\r\n  const imageData = new Uint8ClampedArray(width * height * 4);\r\n\r\n  function ifNoDataFunc(...vals: number[]) {\r\n    if (vals.some((val) => isNaN(val) || val === noData)) return true;\r\n\r\n    return false\r\n  }\r\n\r\n  const { r, g, b } = renderOptions ?? {};\r\n  const ranges = [r, g, b].map(item => getRange(bands, item));\r\n\r\n  const redData = data[0];\r\n  const greenData = data[1];\r\n  const blueData = data[2];\r\n\r\n  for (let i = 0; i < data[0].length; i++) {\r\n    let red = decimal2rgb((redData[i] - ranges[0].min) / ranges[0].range);\r\n    let green = decimal2rgb((greenData[i] - ranges[1].min) / ranges[1].range);\r\n    let blue = decimal2rgb((blueData[i] - ranges[2].min) / ranges[2].range);\r\n    let alpha = ifNoDataFunc(redData[i], greenData[i], blueData[i]) ? 0 : 255;\r\n\r\n    colorMapping.map(([colorFrom, colorTo]) => {\r\n      if (red === colorFrom[0] && green === colorFrom[1] && blue === colorFrom[2]) {\r\n        red = colorTo[0];\r\n        green = colorTo[1];\r\n        blue = colorTo[2];\r\n        alpha = colorTo[3];\r\n      }\r\n    })\r\n    \r\n    imageData[i * 4] = red;\r\n    imageData[i * 4 + 1] = green;\r\n    imageData[i * 4 + 2] = blue;\r\n    imageData[i * 4 + 3] = alpha;\r\n  }\r\n\r\n  const result = new ImageData(imageData, width, height);\r\n\r\n  return result;\r\n}\r\n","import { Event, GeographicTilingScheme, Credit, Rectangle, ImageryLayerFeatureInfo, Math as CesiumMath, DeveloperError, defined, Cartesian2, WebMercatorTilingScheme } from \"cesium\";\r\nimport GeoTIFF, { Pool, fromUrl, fromBlob, GeoTIFFImage } from 'geotiff';\r\n\r\nimport { addColorScale, plot } from './plotty'\r\nimport { getMinMax, generateColorScale, findAndSortBandNumbers, stringColorToRgba } from \"./helpers/utils\";\r\nimport { ColorScaleNames, TypedArray } from \"./plotty/typing\";\r\nimport TIFFImageryProviderTilingScheme from \"./TIFFImageryProviderTilingScheme\";\r\nimport { reprojection } from \"./helpers/reprojection\";\r\n\r\nimport { GenerateImageOptions, generateImage } from \"./helpers/generateImage\";\r\nimport { reverseArray } from \"./helpers/utils\";\r\n\r\nexport interface SingleBandRenderOptions {\r\n  /** band index start from 1, defaults to 1 */\r\n  band?: number;\r\n\r\n  /**\r\n   * The color scale image to use.\r\n   */\r\n  colorScaleImage?: HTMLCanvasElement | HTMLImageElement;\r\n\r\n  /**\r\n   * The name of a named color scale to use.\r\n   */\r\n  colorScale?: ColorScaleNames;\r\n\r\n  /** custom interpolate colors, [stopValue(0 - 1), color] or [color], if the latter, means equal distribution \r\n   * @example\r\n   * [[0, 'red'], [0.6, 'green'], [1, 'blue']]\r\n  */\r\n  colors?: [number, string][] | string[];\r\n\r\n  /** Determine whether to use the true value range for custom color ranges */\r\n  useRealValue?: boolean;\r\n\r\n  /** defaults to continuous */\r\n  type?: 'continuous' | 'discrete';\r\n\r\n  /**\r\n   * The value domain to scale the color.\r\n   */\r\n  domain?: [number, number];\r\n\r\n  /**\r\n   * Range of values that will be rendered, values outside of the range will be transparent.\r\n   */\r\n  displayRange?: [number, number];\r\n\r\n  /**\r\n   * Set if displayRange should be used.\r\n   */\r\n  applyDisplayRange?: boolean;\r\n\r\n  /**\r\n   * Whether or not values below the domain shall be clamped.\r\n   */\r\n  clampLow?: boolean;\r\n\r\n  /**\r\n   * Whether or not values above the domain shall be clamped (if not defined defaults to clampLow value).\r\n   */\r\n  clampHigh?: boolean;\r\n\r\n  /**\r\n   * Sets a mathematical expression to be evaluated on the plot. Expression can contain mathematical operations with integer/float values, band identifiers or GLSL supported functions with a single parameter.\r\n   * Supported mathematical operations are: add '+', subtract '-', multiply '*', divide '/', power '**', unary plus '+a', unary minus '-a'.\r\n   * Useful GLSL functions are for example: radians, degrees, sin, asin, cos, acos, tan, atan, log2, log, sqrt, exp2, exp, abs, sign, floor, ceil, fract.\r\n   * Don't forget to set the domain parameter!\r\n   * @example \r\n   * '-2 * sin(3.1415 - b1) ** 2'\r\n   * '(b1 - b2) / (b1 + b2)'\r\n   */\r\n  expression?: string;\r\n}\r\n\r\nexport interface MultiBandRenderOptions {\r\n  /** Band value starts from 1 */\r\n  r?: {\r\n    band: number;\r\n    min?: number;\r\n    max?: number;\r\n  };\r\n  g?: {\r\n    band: number;\r\n    min?: number;\r\n    max?: number;\r\n  };\r\n  b?: {\r\n    band: number;\r\n    min?: number;\r\n    max?: number;\r\n  };\r\n}\r\n\r\nexport type TIFFImageryProviderRenderOptions = {\r\n  /** nodata value, default read from tiff meta */\r\n  nodata?: number;\r\n  /** Only valid for three band rendering, defaults to { 'black': 'transparent' } */\r\n  colorMapping?: Record<string, string>;\r\n  /** try to render multi band cog to RGB, priority 1 */\r\n  convertToRGB?: boolean;\r\n  /** priority 2 */\r\n  multi?: MultiBandRenderOptions;\r\n  /** priority 3 */\r\n  single?: SingleBandRenderOptions;\r\n}\r\n\r\nexport interface TIFFImageryProviderOptions {\r\n  requestOptions?: {\r\n    /** defaults to false */\r\n    forceXHR?: boolean;\r\n    headers?: Record<string, any>;\r\n    credentials?: boolean;\r\n    /** defaults to 0 */\r\n    maxRanges?: number;\r\n    /** defaults to false */\r\n    allowFullFile?: boolean;\r\n    [key: string]: any;\r\n  };\r\n  credit?: string;\r\n  tileSize?: number;\r\n  maximumLevel?: number;\r\n  minimumLevel?: number;\r\n  enablePickFeatures?: boolean;\r\n  hasAlphaChannel?: boolean;\r\n  renderOptions?: TIFFImageryProviderRenderOptions;\r\n  /**\r\n   * If TIFF's projection is not EPSG:4326 or EPSG:3857, you can pass the ``projFunc`` to handle the projection\r\n   * @experimental\r\n   */\r\n  projFunc?: (code: number) => {\r\n    /** projection function, convert [lon, lat] position to [x, y] */\r\n    project: ((pos: number[]) => number[]);\r\n    /** unprojection function, convert [x, y] position to [lon, lat] */\r\n    unproject: ((pos: number[]) => number[]);\r\n  } | undefined;\r\n  /** cache survival time, defaults to 60 * 1000 ms */\r\n  cache?: number;\r\n  /** geotiff resample method, defaults to nearest */\r\n  resampleMethod?: 'nearest' | 'bilinear' | 'linear';\r\n}\r\nconst canvas = document.createElement('canvas');\r\nlet workerPool: Pool;\r\nfunction getWorkerPool() {\r\n  if (!workerPool) {\r\n    workerPool = new Pool();\r\n  };\r\n  return workerPool;\r\n}\r\n\r\nexport class TIFFImageryProvider {\r\n  ready: boolean;\r\n  tilingScheme: TIFFImageryProviderTilingScheme | GeographicTilingScheme | WebMercatorTilingScheme;\r\n  rectangle: Rectangle;\r\n  tileSize: number;\r\n  tileWidth: number;\r\n  tileHeight: number;\r\n  maximumLevel: number;\r\n  minimumLevel: number;\r\n  credit: Credit;\r\n  errorEvent: Event;\r\n  readyPromise: Promise<boolean>;\r\n  bands: Record<number, {\r\n    min: number;\r\n    max: number;\r\n  }>;\r\n  noData: number;\r\n  hasAlphaChannel: boolean;\r\n  plot: plot;\r\n  renderOptions: TIFFImageryProviderRenderOptions;\r\n  readSamples: number[];\r\n  requestLevels: number[];\r\n  bbox: number[];\r\n  private _destroyed = false;\r\n  private _source!: GeoTIFF;\r\n  private _imageCount!: number;\r\n  private _images: (GeoTIFFImage | null)[] = [];\r\n  private _imagesCache: Record<string, {\r\n    time: number;\r\n    data: ImageData | HTMLCanvasElement | HTMLImageElement;\r\n  }> = {};\r\n  private _cacheTime: number;\r\n  private _isTiled: boolean;\r\n  private _proj?: {\r\n    /** projection function, convert [lon, lat] position to EPSG:4326 */\r\n    project: (pos: number[]) => number[];\r\n    /** unprojection function */\r\n    unproject: (pos: number[]) => number[];\r\n  };\r\n  origin: number[];\r\n  reverseY: boolean = false;\r\n  samples: number;\r\n\r\n  constructor(private readonly options: TIFFImageryProviderOptions & {\r\n    /**\r\n     * @deprecated \r\n     * Deprecated after cesium@1.104+, you can use fromUrl instead\r\n     * @example \r\n     * const provider = await TIFFImageryProvider.fromUrl(url)\r\n     */\r\n    url: string | File | Blob;\r\n  }) {\r\n    this.hasAlphaChannel = options.hasAlphaChannel ?? true;\r\n    this.maximumLevel = options.maximumLevel ?? 18;\r\n    this.minimumLevel = options.minimumLevel ?? 0;\r\n    this.credit = new Credit(options.credit || \"\", false);\r\n    this.errorEvent = new Event();\r\n    this._cacheTime = options.cache ?? 60 * 1000;\r\n\r\n    this.ready = false;\r\n    if (defined(options.url)) {\r\n      this.readyPromise = this._build(options.url, options).then(() => {\r\n        return true;\r\n      })\r\n    }\r\n  }\r\n\r\n  get isDestroyed() {\r\n    return this._destroyed\r\n  }\r\n\r\n  private async _build(url: string | File | Blob, options: TIFFImageryProviderOptions = {}) {\r\n    const { tileSize, renderOptions, projFunc, requestOptions } = options;\r\n    let source = await (url instanceof File || url instanceof Blob ? fromBlob(url) : fromUrl(url, requestOptions))\r\n    let image = await source.getImage();\r\n    this._isTiled = image.isTiled;\r\n\r\n    // handle native tiff range request error\r\n    if (!this._isTiled && typeof url === 'string') {\r\n      source = await fromBlob(await (await fetch(url)).blob());\r\n      image = await source.getImage();\r\n    }\r\n\r\n    this._source = source;\r\n\r\n    // 获取空间范围\r\n    this.origin = this._getOrigin(image);\r\n    this.bbox = image.getBoundingBox();\r\n    this.reverseY = this._checkIfReversed(image);\r\n    const [west, south, east, north] = this.bbox;\r\n\r\n    const prjCode = +(image.geoKeys.ProjectedCSTypeGeoKey ?? image.geoKeys.GeographicTypeGeoKey)\r\n\r\n    this._proj = projFunc?.(prjCode)\r\n    if (prjCode === 3857 || prjCode === 900913) {\r\n      this.tilingScheme = new WebMercatorTilingScheme({\r\n        rectangleNortheastInMeters: new Cartesian2(east, north),\r\n        rectangleSouthwestInMeters: new Cartesian2(west, south),\r\n      })\r\n    } else if (prjCode === 4326) {\r\n      this.tilingScheme = new GeographicTilingScheme({\r\n        rectangle: Rectangle.fromDegrees(...this.bbox),\r\n        numberOfLevelZeroTilesX: 1,\r\n        numberOfLevelZeroTilesY: 1\r\n      });\r\n    } else if (typeof this._proj?.project === 'function' && typeof this._proj?.unproject === 'function') {\r\n      console.warn(`[Experimental] Reprojection EPSG:${prjCode}`)\r\n      this.tilingScheme = new TIFFImageryProviderTilingScheme({\r\n        rectangleNortheastInMeters: new Cartesian2(east, north),\r\n        rectangleSouthwestInMeters: new Cartesian2(west, south),\r\n        ...this._proj\r\n      })\r\n    } else {\r\n      const error = new DeveloperError(`Unspported projection type: EPSG:${prjCode}, please add projFunc parameter to handle projection`)\r\n      throw error;\r\n    }\r\n\r\n    this.rectangle = this.tilingScheme.rectangle\r\n    // 处理跨180度经线的情况\r\n    // https://github.com/CesiumGS/cesium/blob/da00d26473f663db180cacd8e662ca4309e09560/packages/engine/Source/Core/TileAvailability.js#L195\r\n    if (this.rectangle.east < this.rectangle.west) {\r\n      this.rectangle.east += CesiumMath.TWO_PI;\r\n    }\r\n    this._imageCount = await source.getImageCount();\r\n    this.tileSize = this.tileWidth = tileSize || (this._isTiled ? image.getTileWidth() : image.getWidth()) || 512;\r\n    this.tileHeight = tileSize || (this._isTiled ? image.getTileHeight() : image.getHeight()) || 512;\r\n    // 获取合适的COG层级\r\n    this.requestLevels = this._isTiled ? await this._getCogLevels() : [0];\r\n    const maxCogLevel = this.requestLevels.length - 1\r\n    this.maximumLevel = this.maximumLevel > maxCogLevel ? maxCogLevel : this.maximumLevel;\r\n    this._images = new Array(this._imageCount).fill(null);\r\n\r\n    // 获取波段数\r\n    const samples = image.getSamplesPerPixel();\r\n    this.samples = samples;\r\n    this.renderOptions = renderOptions ?? {}\r\n    // 获取nodata值\r\n    const noData = image.getGDALNoData();\r\n    this.noData = this.renderOptions.nodata ?? noData;\r\n\r\n    // 赋初值\r\n    if (samples < 3 && this.renderOptions.convertToRGB) {\r\n      const error = new DeveloperError('Can not render the image as RGB, please check the convertToRGB parameter')\r\n      throw error;\r\n    }\r\n    if (!this.renderOptions.single && !this.renderOptions.multi && !this.renderOptions.convertToRGB) {\r\n      if (samples > 2) {\r\n        this.renderOptions = {\r\n          convertToRGB: true,\r\n          ...this.renderOptions\r\n        }\r\n      } else {\r\n        this.renderOptions = {\r\n          single: {\r\n            band: 1\r\n          },\r\n          ...this.renderOptions\r\n        }\r\n      }\r\n    }\r\n    if (this.renderOptions.single) {\r\n      this.renderOptions.single.band = this.renderOptions.single.band ?? 1;\r\n    }\r\n\r\n    const { single, multi, convertToRGB } = this.renderOptions;\r\n    this.readSamples = multi ? [multi.r.band - 1, multi.g.band - 1, multi.b.band - 1] : convertToRGB ? [0, 1, 2] : Array.from({ length: samples }, (_, index) => index);\r\n    if (single?.expression) {\r\n      this.readSamples = findAndSortBandNumbers(single.expression);\r\n    }\r\n\r\n    // 获取波段最大最小值信息\r\n    const bands: Record<number, {\r\n      min: number;\r\n      max: number;\r\n    }> = {};\r\n    await Promise.all(this.readSamples.map(async (i) => {\r\n      const element = image.getGDALMetadata(i);\r\n      const bandNum = i + 1;\r\n\r\n      if (element?.STATISTICS_MINIMUM && element?.STATISTICS_MAXIMUM) {\r\n        bands[bandNum] = {\r\n          min: +element.STATISTICS_MINIMUM,\r\n          max: +element.STATISTICS_MAXIMUM,\r\n        }\r\n      } else {\r\n        if (convertToRGB) {\r\n          bands[bandNum] = {\r\n            min: 0,\r\n            max: 255,\r\n          }\r\n        };\r\n\r\n        if (multi) {\r\n          const inputBand = multi[Object.keys(multi).find(key => multi[key]?.band === bandNum)]\r\n          if (inputBand?.min !== undefined && inputBand?.max !== undefined) {\r\n            const { min, max } = inputBand\r\n            bands[bandNum] = {\r\n              min, max\r\n            }\r\n          }\r\n        }\r\n\r\n        if (single && !single.expression && single.band === bandNum && single.domain) {\r\n          bands[bandNum] = {\r\n            min: single.domain[0],\r\n            max: single.domain[1],\r\n          }\r\n        }\r\n\r\n        if (!single?.expression && !bands[bandNum]) {\r\n          // 尝试获取波段最大最小值\r\n          console.warn(`Can not get band${bandNum} min/max, try to calculate min/max values, or setting ${single ? 'domain' : 'min / max'}`)\r\n\r\n          const previewImage = await source.getImage(this.requestLevels[0])\r\n          const data = (await previewImage.readRasters({\r\n            samples: [i],\r\n            pool: getWorkerPool(),\r\n          }) as unknown as number[][])[0].filter((item: any) => !isNaN(item))\r\n          bands[bandNum] = getMinMax(data, noData)\r\n        }\r\n      }\r\n    }))\r\n    this.bands = bands;\r\n\r\n    // 如果是单通道渲染, 则构建plot对象\r\n    try {\r\n      if (this.renderOptions.single) {\r\n        const band = this.bands[single.band];\r\n        if (!single.expression && !band) {\r\n          throw new DeveloperError(`Invalid band${single.band}`);\r\n        }\r\n        const domain = single.domain ?? [band.min, band.max]\r\n        this.plot = new plot({\r\n          canvas,\r\n          ...single,\r\n          domain \r\n        })\r\n        this.plot.setNoDataValue(this.noData);\r\n\r\n        const { expression, colors, colorScaleImage } = single;\r\n        this.plot.setExpression(expression);\r\n        if (colors) {\r\n          const colorScale = generateColorScale(colors, single?.useRealValue ? domain : [0, 1])\r\n          addColorScale('temp', colorScale.colors, colorScale.positions);\r\n          this.plot.setColorScale('temp' as any);\r\n        } else if (!colorScaleImage) {\r\n          this.plot.setColorScale(single?.colorScale ?? 'blackwhite');\r\n        }\r\n      }\r\n    } catch (e) {\r\n      console.error(e);\r\n      this.errorEvent.raiseEvent(e);\r\n    }\r\n    this.readyPromise = Promise.resolve(true);\r\n    this.ready = true;\r\n  }\r\n\r\n  static async fromUrl(url: string | File | Blob, options: TIFFImageryProviderOptions = {}) {\r\n    const provider = new TIFFImageryProvider(options as any);\r\n\r\n    await provider._build(url, {\r\n      ...options,\r\n      url: undefined\r\n    } as any)\r\n\r\n    return provider;\r\n  }\r\n\r\n  /**\r\n   * Get the origin of an image.  If the image does not have an affine transform,\r\n   * the top-left corner of the pixel bounds is returned.\r\n   * @param {GeoTIFFImage} image The image.\r\n   * @return {Array<number>} The image origin.\r\n   */\r\n  private _getOrigin(image: GeoTIFFImage): number[] {\r\n    try {\r\n      return image.getOrigin().slice(0, 2);\r\n    } catch (_) {\r\n      return [0, image.fileDirectory.ImageLength];\r\n    }\r\n  }\r\n\r\n  private _checkIfReversed(image: GeoTIFFImage) {\r\n    const pixelScale = image.getFileDirectory().ModelPixelScale;\r\n    if (pixelScale) {\r\n      const pixelScaleY = pixelScale[1];\r\n      if (pixelScaleY < 0) return true;\r\n    }\r\n\r\n    const transformation = image.getFileDirectory().ModelTransformation;\r\n    if (transformation) {\r\n      const originX = transformation[3];\r\n      const originY = transformation[7];\r\n      if (originY > originX) return true;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * get suitable cog levels\r\n   */\r\n  private async _getCogLevels() {\r\n    const levels: number[] = [];\r\n    let maximumLevel: number = this._imageCount - 1;\r\n    for (let i = this._imageCount - 1; i >= 0; i--) {\r\n      const image = this._images[i] = await this._source.getImage(i);\r\n      const width = image.getWidth();\r\n      const height = image.getHeight();\r\n      const size = Math.max(width, height);\r\n\r\n      // 如果第一张瓦片的image tileSize大于512，则顺位后延，以减少请求量\r\n      if (i === this._imageCount - 1) {\r\n        const firstImageLevel = Math.ceil((size - this.tileSize) / this.tileSize)\r\n        levels.push(...new Array(firstImageLevel).fill(i))\r\n      }\r\n\r\n      // add 50% tilewidth tolerance\r\n      if (size > (this.tileSize * 0.5)) {\r\n        maximumLevel = i;\r\n        break;\r\n      }\r\n    }\r\n    let nowCogLevel: number = maximumLevel;\r\n    while (nowCogLevel >= 0) {\r\n      levels.push(nowCogLevel--);\r\n    }\r\n    return levels;\r\n  }\r\n\r\n  /**\r\n   * 获取瓦片数据\r\n   * @param x \r\n   * @param y \r\n   * @param z \r\n   */\r\n  private async _loadTile(x: number, y: number, z: number) {\r\n    const index = this.requestLevels[z];\r\n    let image = this._images[index];\r\n    if (!image) {\r\n      image = this._images[index] = await this._source.getImage(index);\r\n    }\r\n\r\n    const width = image.getWidth();\r\n    const height = image.getHeight();\r\n    const tileXNum = this.tilingScheme.getNumberOfXTilesAtLevel(z);\r\n    const tileYNum = this.tilingScheme.getNumberOfYTilesAtLevel(z);\r\n    const tilePixel = {\r\n      xWidth: width / tileXNum,\r\n      yWidth: height / tileYNum\r\n    }\r\n    let window = [\r\n      Math.round(x * tilePixel.xWidth),\r\n      Math.round(y * tilePixel.yWidth),\r\n      Math.round((x + 1) * tilePixel.xWidth),\r\n      Math.round((y + 1) * tilePixel.yWidth),\r\n    ];\r\n\r\n    if (this._proj && this.tilingScheme instanceof TIFFImageryProviderTilingScheme) {\r\n      const targetRect = this.tilingScheme.tileXYToNativeRectangle2(x, y, z);\r\n      const nativeRect = this.tilingScheme.nativeRectangle;\r\n      targetRect.west -= (nativeRect.width / width)\r\n      targetRect.east += (nativeRect.width / width)\r\n      targetRect.south -= (nativeRect.height / height)\r\n      targetRect.north += (nativeRect.height / height)\r\n\r\n      window = [\r\n        ~~((targetRect.west - nativeRect.west) / nativeRect.width * width),\r\n        ~~((nativeRect.north - targetRect.north) / nativeRect.height * height),\r\n        ~~((targetRect.east - nativeRect.west) / nativeRect.width * width),\r\n        ~~((nativeRect.north - targetRect.south) / nativeRect.height * height),\r\n      ]\r\n    }\r\n    if (this.reverseY) {\r\n      window = [window[0], height - window[3], window[2], height - window[1]];\r\n    }\r\n    const options = {\r\n      window,\r\n      pool: getWorkerPool(),\r\n      width: this.tileWidth,\r\n      height: this.tileHeight,\r\n      samples: this.readSamples,\r\n      resampleMethod: this.options.resampleMethod,\r\n      fillValue: this.noData,\r\n      interleave: false,\r\n    }\r\n    let res: TypedArray[];\r\n    try {\r\n      if (this.renderOptions.convertToRGB) {\r\n        res = await image.readRGB(options) as TypedArray[];\r\n      } else {\r\n        res = await image.readRasters(options) as TypedArray[];\r\n        if (this.reverseY) {\r\n          res = await Promise.all((res).map((arr: any) => reverseArray({ array: arr, width: (res as any).width, height: (res as any).height }))) as any;\r\n        }\r\n      }\r\n\r\n      if (this._proj?.project && this.tilingScheme instanceof TIFFImageryProviderTilingScheme) {\r\n        const sourceRect = this.tilingScheme.tileXYToNativeRectangle2(x, y, z);\r\n        const targetRect = this.tilingScheme.tileXYToRectangle(x, y, z);\r\n\r\n        const sourceBBox = [sourceRect.west, sourceRect.south, sourceRect.east, sourceRect.north] as any;\r\n        const targetBBox = [targetRect.west, targetRect.south, targetRect.east, targetRect.north].map(CesiumMath.toDegrees) as any\r\n\r\n        const result = [];\r\n        for (let i = 0; i < res.length; i++) {\r\n          const prjData = reprojection({\r\n            data: res[i] as any,\r\n            sourceWidth: this.tileWidth,\r\n            sourceHeight: this.tileHeight,\r\n            targetWidth: this.tileWidth,\r\n            targetHeight: this.tileHeight,\r\n            nodata: this.noData,\r\n            project: this._proj.project,\r\n            sourceBBox,\r\n            targetBBox\r\n          })\r\n          result.push(prjData)\r\n        }\r\n        res = result\r\n\r\n      }\r\n      return {\r\n        data: res,\r\n        width: this.tileWidth,\r\n        height: this.tileHeight\r\n      };\r\n    } catch (error) {\r\n      this.errorEvent.raiseEvent(error);\r\n      throw error;\r\n    }\r\n  }\r\n  \r\n  private _createTile() {\r\n    const canv = document.createElement(\"canvas\");\r\n    canv.width = this.tileWidth;\r\n    canv.height = this.tileHeight;\r\n    canv.style.imageRendering = \"pixelated\";\r\n    return canv;\r\n  }\r\n\r\n  async requestImage(\r\n    x: number,\r\n    y: number,\r\n    z: number,\r\n  ) {\r\n    if (!this.ready) {\r\n      throw new DeveloperError(\r\n        \"requestImage must not be called before the imagery provider is ready.\"\r\n      );\r\n    }\r\n    if (z < this.minimumLevel || z > this.maximumLevel) return undefined\r\n    if (this._cacheTime && this._imagesCache[`${x}_${y}_${z}`]) return this._imagesCache[`${x}_${y}_${z}`].data;\r\n\r\n    const { single, multi, convertToRGB } = this.renderOptions;\r\n\r\n    try {\r\n      const { width, height, data } = await this._loadTile(x, y, z);\r\n      if (this._destroyed) {\r\n        return undefined;\r\n      }\r\n\r\n      let result: ImageData | HTMLImageElement | HTMLCanvasElement\r\n\r\n      if (multi || convertToRGB) {\r\n        const opts: GenerateImageOptions = {\r\n          data: data as any,\r\n          width,\r\n          height,\r\n          renderOptions: multi ?? ['r', 'g', 'b'].reduce((pre, val, index) => ({\r\n            ...pre,\r\n            [val]: {\r\n              band: index + 1,\r\n              min: 0,\r\n              max: 255\r\n            }\r\n          }), {}),\r\n          bands: this.bands,\r\n          noData: this.noData,\r\n          colorMapping: Object.entries(this.renderOptions.colorMapping ?? { 'black': 'transparent' }).map((val) => val.map(stringColorToRgba)),\r\n        }\r\n\r\n        result = await generateImage(opts);\r\n      } else if (single && this.plot) {\r\n        const { band = 1 } = single;\r\n        this.plot.removeAllDataset();\r\n        this.readSamples.forEach((sample, index) => {\r\n          this.plot.addDataset(`b${sample + 1}`, data[index], width, height);\r\n        })\r\n\r\n        if (single.expression) {\r\n          this.plot.render();\r\n        } else {\r\n          this.plot.renderDataset(`b${band}`)\r\n        }\r\n\r\n        const canv = this._createTile()\r\n        const ctx = canv.getContext(\"2d\")\r\n        ctx.drawImage(this.plot.canvas, 0, 0);\r\n        result = canv;\r\n      }\r\n\r\n      if (result && this._cacheTime) {\r\n        const now = new Date().getTime()\r\n        this._imagesCache[`${x}_${y}_${z}`] = {\r\n          time: now,\r\n          data: result\r\n        };\r\n        for (let key in this._imagesCache) {\r\n          if ((now - this._imagesCache[key].time) > this._cacheTime) {\r\n            delete this._imagesCache[key]\r\n          }\r\n        }\r\n      }\r\n      return result;\r\n    } catch (e) {\r\n      console.error(e);\r\n      this.errorEvent.raiseEvent(e);\r\n      throw e;\r\n    }\r\n  }\r\n\r\n  async pickFeatures(x: number, y: number, zoom: number, longitude: number, latitude: number) {\r\n    if (!this.options.enablePickFeatures) return undefined\r\n\r\n    const z = zoom > this.maximumLevel ? this.maximumLevel : zoom;\r\n    const index = this.requestLevels[z];\r\n    let image = this._images[index];\r\n    if (!image) {\r\n      image = this._images[index] = await this._source.getImage(index);\r\n    }\r\n    const width = image.getWidth();\r\n    const height = image.getHeight();\r\n    let posX: number, posY: number, window: number[];\r\n    const { west, south, north, width: lonWidth } = this.rectangle;\r\n    let lonGap = longitude - west;\r\n    // 处理跨180°经线的情况\r\n    if (longitude < west) {\r\n      lonGap += CesiumMath.TWO_PI;\r\n    }\r\n\r\n    posX = ~~(Math.abs(lonGap / lonWidth) * width);\r\n    posY = ~~(Math.abs((north - latitude) / (north - south)) * height);\r\n    window = [posX, posY, posX + 1, posY + 1];\r\n\r\n    if (this.reverseY) {\r\n      posY = height - posY;\r\n      window = [posX, posY - 1, posX + 1, posY]\r\n    }\r\n    const options = {\r\n      window,\r\n      height: 1,\r\n      width: 1,\r\n      pool: getWorkerPool(),\r\n      interleave: false,\r\n    }\r\n    let res: TypedArray[];\r\n    if (this.renderOptions.convertToRGB) {\r\n      res = await image.readRGB(options) as TypedArray[];\r\n    } else {\r\n      res = await image.readRasters(options) as TypedArray[];\r\n    }\r\n\r\n    const featureInfo = new ImageryLayerFeatureInfo()\r\n    featureInfo.name = `lon:${(longitude / Math.PI * 180).toFixed(6)}, lat:${(latitude / Math.PI * 180).toFixed(6)}`;\r\n    const data = {};\r\n    res?.forEach((item: any, index: number) => {\r\n      data[index] = item?.[0];\r\n    })\r\n    featureInfo.data = data\r\n    if (res) {\r\n      featureInfo.configureDescriptionFromProperties(data)\r\n    }\r\n    return [featureInfo];\r\n  }\r\n\r\n  destroy() {\r\n    this._images = undefined;\r\n    this._source = undefined;\r\n    this._imagesCache = undefined;\r\n    this.plot?.destroy();\r\n    this._destroyed = true;\r\n  }\r\n}\r\n\r\nexport default TIFFImageryProvider;\r\n"],"names":["expected","found","text","location","vertexShaderSource","fragmentShaderSource","parseArithmetics","CesiumMath","_a","index"],"mappings":";;;AAAO,MAAM,WAAc,GAAA;AAAA,EACvnrjH,KAAO,EAAA,IAAI,UAAW,CAAA,CAAC,EAAG,EAAA,EAAA,EAAG,EAAG,EAAA,GAAA,EAAI,EAAG,EAAA,EAAA,EAAG,EAAG,EAAA,GAAA,EAAI,EAAG,EAAA,EAAA,EAAG,EAAG,EAAA,GAAA,EAAI,EAAG,EAAA,EAAA,EAAG,EAAG,EAAA,GAAA,EAAI,EAAG,EAAA,EAAA,EAAG,EAAG,EAAA,GAAA,EAAI,EAAG,EAAA,EAAA,EAAG,EAAG,EAAA,GAAA,EAAI,EAAG,EAAA,EAAA,EAAG,GAAI,EAAA,GAAA,EAAI,EAAG,EAAA,EAAA,EAAG,GAAI,EAAA,GAAA,EAAI,EAAG,EAAA,EAAA,EAAG,GAAI,EAAA,GAAA,EAAI,EAAG,EAAA,EAAA,EAAG,GAAI,EAAA,GAAA,EAAI,EAAG,EAAA,EAAA,EAAG,GAAI,EAAA,GAAA,EAAI,EAAG,EAAA,EAAA,EAAG,GAAI,EAAA,GAAA,EAAI,EAAG,EAAA,EAAA,EAAG,GAAI,EAAA,GAAA,EAAI,EAAG,EAAA,EAAA,EAAG,GAAI,EAAA,GAAA,EAAI,EAAG,EAAA,EAAA,EAAG,GAAI,EAAA,GAAA,EAAI,EAAG,EAAA,EAAA,EAAG,GAAI,EAAA,GAAA,EAAI,EAAG,EAAA,EAAA,EAAG,GAAI,EAAA,GAAA,EAAI,EAAG,EAAA,EAAA,EAAG,GAAI,EAAA,GAAA,EAAI,EAAG,EAAA,EAAA,EAAG,GAAI,EAAA,GAAA,EAAI,EAAG,EAAA,EAAA,EAAG,GAAI,EAAA,GAAA,EAAI,EAAG,EAAA,EAAA,EAAG,GAAI,EAAA,GAAA,EAAI,EAAG,EAAA,EAAA,EAAG,GAAI,EAAA,GAAA,EAAI,EAAG,EAAA,EAAA,EAAG,GAAI,EAAA,GAAA,EAAI,EAAG,EAAA,EAAA,EAAG,GAAI,EAAA,GAAA,EAAI,EAAG,EAAA,EAAA,EAAG,GAAI,EAAA,GAAA,EAAI,EAAG,EAAA,EAAA,EAAG,GAAI,EAAA,GAAA,EAAI,EAAG,EAAA,EAAA,EAAG,GAAI,EAAA,GAAA,EAAI,EAAG,EAAA,EAAA,EAAG,GAAI,EAAA,GAAA,EAAI,EAAG,EAAA,EAAA,EAAG,GAAI,EAAA,GAAA,EAAI,EAAG,EAAA,GAAA,EAAI,GAAI,EAAA,GAAA,EAAI,IAAG,GAAI,EAAA,GAAA,EAAI,GAAI,EAAA,EAAA,EAAG,GAAI,EAAA,GAAA,EAAI,GAAI,EAAA,EAAA,EAAG,GAAI,EAAA,GAAA,EAAI,GAAI,EAAA,EAAA,EAAG,GAAI,EAAA,GAAA,EAAI,GAAI,EAAA,EAAA,EAAG,GAAI,EAAA,GAAA,EAAI,GAAI,EAAA,EAAA,EAAG,GAAI,EAAA,GAAA,EAAI,GAAI,EAAA,EAAA,EAAG,GAAI,EAAA,GAAA,EAAI,GAAI,EAAA,EAAA,EAAG,GAAI,EAAA,GAAA,EAAI,GAAI,EAAA,EAAA,EAAG,GAAI,EAAA,GAAA,EAAI,GAAI,EAAA,EAAA,EAAG,GAAI,EAAA,GAAA,EAAI,GAAI,EAAA,EAAA,EAAG,GAAI,EAAA,GAAA,EAAI,GAAI,EAAA,EAAA,EAAG,GAAI,EAAA,GAAA,EAAI,GAAI,EAAA,EAAA,EAAG,GAAI,EAAA,GAAA,EAAI,GAAI,EAAA,EAAA,EAAG,GAAI,EAAA,GAAA,EAAI,GAAI,EAAA,EAAA,EAAG,GAAI,EAAA,GAAA,EAAI,GAAI,EAAA,EAAA,EAAG,GAAI,EAAA,GAAA,EAAI,GAAI,EAAA,EAAA,EAAG,GAAI,EAAA,GAAA,EAAI,GAAI,EAAA,EAAA,EAAG,GAAI,EAAA,GAAA,EAAI,GAAI,EAAA,EAAA,EAAG,GAAI,EAAA,GAAA,EAAI,GAAI,EAAA,EAAA,EAAG,GAAI,EAAA,GAAA,EAAI,GAAI,EAAA,EAAA,EAAG,GAAI,EAAA,GAAA,EAAI,GAAI,EAAA,EAAA,EAAG,GAAI,EAAA,GAAA,EAAI,GAAI,EAAA,EAAA,EAAG,GAAI,EAAA,GAAA,EAAI,GAAI,EAAA,EAAA,EAAG,GAAI,EAAA,GAAA,EAAI,GAAI,EAAA,EAAA,EAAG,GAAI,EAAA,GAAA,EAAI,GAAI,EAAA,EAAA,EAAG,GAAI,EAAA,GAAA,EAAI,GAAI,EAAA,EAAA,EAAG,GAAI,EAAA,GAAA,EAAI,GAAI,EAAA,EAAA,EAAG,GAAI,EAAA,GAAA,EAAI,GAAI,EAAA,EAAA,EAAG,GAAI,EAAA,GAAA,EAAI,GAAI,EAAA,EAAA,EAAG,GAAI,EAAA,GAAA,EAAI,GAAI,EAAA,EAAA,EAAG,GAAI,EAAA,GAAA,EAAI,GAAI,EAAA,EAAA,EAAG,GAAI,EAAA,GAAA,EAAI,GAAI,EAAA,EAAA,EAAG,KAAI,GAAI,EAAA,GAAA,EAAI,EAAG,EAAA,GAAA,EAAI,GAAI,EAAA,GAAA,EAAI,EAAG,EAAA,GAAA,EAAI,GAAI,EAAA,GAAA,EAAI,EAAG,EAAA,GAAA,EAAI,GAAI,EAAA,GAAA,EAAI,EAAG,EAAA,GAAA,EAAI,GAAI,EAAA,GAAA,EAAI,EAAG,EAAA,GAAA,EAAI,GAAI,EAAA,GAAA,EAAI,EAAG,EAAA,GAAA,EAAI,GAAI,EAAA,GAAA,EAAI,EAAG,EAAA,GAAA,EAAI,GAAI,EAAA,GAAA,EAAI,EAAG,EAAA,GAAA,EAAI,GAAI,EAAA,GAAA,EAAI,EAAG,EAAA,GAAA,EAAI,GAAI,EAAA,GAAA,EAAI,EAAG,EAAA,GAAA,EAAI,GAAI,EAAA,GAAA,EAAI,EAAG,EAAA,GAAA,EAAI,GAAI,EAAA,GAAA,EAAI,EAAG,EAAA,GAAA,EAAI,GAAI,EAAA,GAAA,EAAI,EAAG,EAAA,GAAA,EAAI,GAAI,EAAA,GAAA,EAAI,EAAG,EAAA,GAAA,EAAI,GAAI,EAAA,GAAA,EAAI,EAAG,EAAA,GAAA,EAAI,GAAI,EAAA,GAAA,EAAI,EAAG,EAAA,GAAA,EAAI,GAAI,EAAA,GAAA,EAAI,EAAG,EAAA,GAAA,EAAI,GAAI,EAAA,GAAA,EAAI,EAAG,EAAA,GAAA,EAAI,GAAI,EAAA,GAAA,EAAI,EAAG,EAAA,GAAA,EAAI,GAAI,EAAA,GAAA,EAAI,EAAG,EAAA,GAAA,EAAI,GAAI,EAAA,GAAA,EAAI,EAAG,EAAA,GAAA,EAAI,GAAI,EAAA,GAAA,EAAI,EAAG,EAAA,GAAA,EAAI,GAAI,EAAA,GAAA,EAAI,EAAG,EAAA,GAAA,EAAI,GAAI,EAAA,GAAA,EAAI,EAAG,EAAA,GAAA,EAAI,GAAI,EAAA,GAAA,EAAI,EAAG,EAAA,GAAA,EAAI,GAAI,EAAA,GAAA,EAAI,EAAG,EAAA,GAAA,EAAI,GAAI,EAAA,GAAA,EAAI,EAAG,EAAA,GAAA,EAAI,GAAI,EAAA,GAAA,EAAI,EAAG,EAAA,GAAA,EAAI,GAAI,EAAA,GAAA,EAAI,EAAG,EAAA,GAAA,EAAI,GAAI,EAAA,GAAA,EAAI,EAAG,EAAA,GAAA,EAAI,GAAI,EAAA,GAAA,EAAI,EAAG,EAAA,GAAA,EAAI,GAAI,EAAA,GAAA,EAAI,EAAG,EAAA,GAAA,EAAI,KAAI,GAAI,EAAA,EAAA,EAAG,GAAI,EAAA,GAAA,EAAI,GAAI,EAAA,EAAA,EAAG,GAAI,EAAA,GAAA,EAAI,GAAI,EAAA,EAAA,EAAG,GAAI,EAAA,GAAA,EAAI,GAAI,EAAA,EAAA,EAAG,GAAI,EAAA,GAAA,EAAI,GAAI,EAAA,EAAA,EAAG,GAAI,EAAA,GAAA,EAAI,GAAI,EAAA,EAAA,EAAG,GAAI,EAAA,GAAA,EAAI,GAAI,EAAA,EAAA,EAAG,GAAI,EAAA,GAAA,EAAI,GAAI,EAAA,EAAA,EAAG,GAAI,EAAA,GAAA,EAAI,GAAI,EAAA,EAAA,EAAG,GAAI,EAAA,GAAA,EAAI,GAAI,EAAA,EAAA,EAAG,GAAI,EAAA,GAAA,EAAI,GAAI,EAAA,EAAA,EAAG,GAAI,EAAA,GAAA,EAAI,GAAI,EAAA,EAAA,EAAG,GAAI,EAAA,GAAA,EAAI,GAAI,EAAA,EAAA,EAAG,GAAI,EAAA,GAAA,EAAI,GAAI,EAAA,EAAA,EAAG,GAAI,EAAA,GAAA,EAAI,GAAI,EAAA,EAAA,EAAG,GAAI,EAAA,GAAA,EAAI,GAAI,EAAA,GAAA,EAAI,GAAI,EAAA,GAAA,EAAI,GAAI,EAAA,GAAA,EAAI,GAAI,EAAA,GAAA,EAAI,GAAI,EAAA,GAAA,EAAI,GAAI,EAAA,EAAA,EAAG,GAAI,EAAA,GAAA,EAAI,GAAI,EAAA,EAAA,EAAG,GAAI,EAAA,GAAA,EAAI,GAAI,EAAA,EAAA,EAAG,GAAI,EAAA,GAAA,EAAI,GAAI,EAAA,EAAA,EAAG,GAAI,EAAA,GAAA,EAAI,GAAI,EAAA,EAAA,EAAG,GAAI,EAAA,GAAA,EAAI,GAAI,EAAA,EAAA,EAAG,GAAI,EAAA,GAAA,EAAI,GAAI,EAAA,EAAA,EAAG,GAAI,EAAA,GAAA,EAAI,GAAI,EAAA,EAAA,EAAG,GAAI,EAAA,GAAA,EAAI,GAAI,EAAA,EAAA,EAAG,GAAI,EAAA,GAAA,EAAI,GAAI,EAAA,EAAA,EAAG,GAAI,EAAA,GAAA,EAAI,GAAI,EAAA,EAAA,EAAG,GAAI,EAAA,GAAA,EAAI,GAAI,EAAA,EAAA,EAAG,GAAI,EAAA,GAAA,EAAI,GAAI,EAAA,EAAA,EAAG,GAAI,EAAA,GAAA,EAAI,GAAI,EAAA,EAAA,EAAG,GAAI,EAAA,GAAA,EAAI,GAAI,EAAA,EAAA,EAAG,KAAI,GAAI,EAAA,GAAA,EAAI,EAAG,EAAA,GAAA,EAAI,GAAI,EAAA,GAAA,EAAI,EAAG,EAAA,GAAA,EAAI,GAAI,EAAA,GAAA,EAAI,EAAG,EAAA,GAAA,EAAI,GAAI,EAAA,GAAA,EAAI,EAAG,EAAA,GAAA,EAAI,GAAI,EAAA,GAAA,EAAI,EAAG,EAAA,GAAA,EAAI,GAAI,EAAA,GAAA,EAAI,EAAG,EAAA,GAAA,EAAI,GAAI,EAAA,GAAA,EAAI,EAAG,EAAA,GAAA,EAAI,GAAI,EAAA,GAAA,EAAI,EAAG,EAAA,GAAA,EAAI,GAAI,EAAA,GAAA,EAAI,EAAG,EAAA,GAAA,EAAI,GAAI,EAAA,GAAA,EAAI,EAAG,EAAA,GAAA,EAAI,GAAI,EAAA,GAAA,EAAI,EAAG,EAAA,GAAA,EAAI,GAAI,EAAA,GAAA,EAAI,EAAG,EAAA,GAAA,EAAI,GAAI,EAAA,GAAA,EAAI,EAAG,EAAA,GAAA,EAAI,GAAI,EAAA,GAAA,EAAI,EAAG,EAAA,GAAA,EAAI,GAAI,EAAA,GAAA,EAAI,EAAG,EAAA,GAAA,EAAI,GAAI,EAAA,GAAA,EAAI,EAAG,EAAA,GAAA,EAAI,GAAI,EAAA,GAAA,EAAI,EAAG,EAAA,GAAA,EAAI,GAAI,EAAA,GAAA,EAAI,EAAG,EAAA,GAAA,EAAI,GAAI,EAAA,GAAA,EAAI,EAAG,EAAA,GAAA,EAAI,GAAI,EAAA,GAAA,EAAI,EAAG,EAAA,GAAA,EAAI,GAAI,EAAA,GAAA,EAAI,EAAG,EAAA,GAAA,EAAI,GAAI,EAAA,GAAA,EAAI,EAAG,EAAA,GAAA,EAAI,GAAI,EAAA,GAAA,EAAI,EAAG,EAAA,GAAA,EAAI,GAAI,EAAA,GAAA,EAAI,EAAG,EAAA,GAAA,EAAI,GAAI,EAAA,GAAA,EAAI,EAAG,EAAA,GAAA,EAAI,GAAI,EAAA,GAAA,EAAI,EAAG,EAAA,GAAA,EAAI,GAAI,EAAA,GAAA,EAAI,EAAG,EAAA,GAAA,EAAI,GAAI,EAAA,GAAA,EAAI,EAAG,EAAA,GAAA,EAAI,GAAI,EAAA,GAAA,EAAI,EAAG,EAAA,GAAA,EAAI,GAAI,EAAA,GAAA,EAAI,EAAG,EAAA,GAAA,EAAI,GAAI,EAAA,GAAA,EAAI,EAAG,EAAA,GAAA,EAAI,GAAI,EAAA,GAAA,EAAI,EAAG,EAAA,GAAA,EAAI,KAAI,GAAI,EAAA,EAAA,EAAG,GAAI,EAAA,GAAA,EAAI,GAAI,EAAA,EAAA,EAAG,GAAI,EAAA,GAAA,EAAI,GAAI,EAAA,EAAA,EAAG,GAAI,EAAA,GAAA,EAAI,GAAI,EAAA,EAAA,EAAG,GAAI,EAAA,GAAA,EAAI,GAAI,EAAA,EAAA,EAAG,GAAI,EAAA,GAAA,EAAI,GAAI,EAAA,EAAA,EAAG,GAAI,EAAA,GAAA,EAAI,GAAI,EAAA,EAAA,EAAG,GAAI,EAAA,GAAA,EAAI,GAAI,EAAA,EAAA,EAAG,GAAI,EAAA,GAAA,EAAI,GAAI,EAAA,EAAA,EAAG,GAAI,EAAA,GAAA,EAAI,GAAI,EAAA,EAAA,EAAG,GAAI,EAAA,GAAA,EAAI,GAAI,EAAA,EAAA,EAAG,GAAI,EAAA,GAAA,EAAI,GAAI,EAAA,EAAA,EAAG,GAAI,EAAA,GAAA,EAAI,GAAI,EAAA,EAAA,EAAG,GAAI,EAAA,GAAA,EAAI,GAAI,EAAA,EAAA,EAAG,GAAI,EAAA,GAAA,EAAI,GAAI,EAAA,EAAA,EAAG,GAAI,EAAA,GAAA,EAAI,GAAI,EAAA,EAAA,EAAG,GAAI,EAAA,GAAA,EAAI,GAAI,EAAA,EAAA,EAAG,GAAI,EAAA,GAAA,EAAI,GAAI,EAAA,EAAA,EAAG,GAAI,EAAA,GAAA,EAAI,GAAI,EAAA,EAAA,EAAG,GAAI,EAAA,GAAA,EAAI,GAAI,EAAA,EAAA,EAAG,GAAI,EAAA,GAAA,EAAI,GAAI,EAAA,EAAA,EAAG,GAAI,EAAA,GAAA,EAAI,GAAI,EAAA,EAAA,EAAG,GAAI,EAAA,GAAA,EAAI,GAAI,EAAA,EAAA,EAAG,GAAI,EAAA,GAAA,EAAI,GAAI,EAAA,EAAA,EAAG,GAAI,EAAA,GAAA,EAAI,GAAI,EAAA,EAAA,EAAG,GAAI,EAAA,GAAA,EAAI,GAAI,EAAA,EAAA,EAAG,GAAI,EAAA,GAAA,EAAI,GAAI,EAAA,EAAA,EAAG,GAAI,EAAA,GAAA,EAAI,GAAI,EAAA,EAAA,EAAG,GAAI,EAAA,GAAA,EAAI,GAAI,EAAA,EAAA,EAAG,GAAI,EAAA,GAAA,EAAI,GAAI,EAAA,EAAA,EAAG,GAAI,EAAA,GAAA,EAAI,GAAI,EAAA,EAAA,EAAG,GAAI,EAAA,GAAA,EAAI,GAAI,EAAA,EAAA,EAAG,GAAI,EAAA,GAAA,EAAI,KAAI,EAAG,EAAA,GAAA,EAAI,GAAI,EAAA,GAAA,EAAI,EAAG,EAAA,GAAA,EAAI,GAAI,EAAA,GAAA,EAAI,EAAG,EAAA,GAAA,EAAI,GAAI,EAAA,GAAA,EAAI,EAAG,EAAA,GAAA,EAAI,GAAI,EAAA,GAAA,EAAI,EAAG,EAAA,GAAA,EAAI,GAAI,EAAA,GAAA,EAAI,EAAG,EAAA,GAAA,EAAI,GAAI,EAAA,GAAA,EAAI,EAAG,EAAA,GAAA,EAAI,GAAI,EAAA,GAAA,EAAI,EAAG,EAAA,GAAA,EAAI,GAAI,EAAA,GAAA,EAAI,EAAG,EAAA,GAAA,EAAI,GAAI,EAAA,GAAA,EAAI,EAAG,EAAA,GAAA,EAAI,GAAI,EAAA,EAAA,EAAG,EAAG,EAAA,GAAA,EAAI,GAAI,EAAA,EAAA,EAAG,EAAG,EAAA,GAAA,EAAI,GAAI,EAAA,EAAA,EAAG,EAAG,EAAA,GAAA,EAAI,GAAI,EAAA,EAAA,EAAG,EAAG,EAAA,GAAA,EAAI,GAAI,EAAA,EAAA,EAAG,EAAG,EAAA,GAAA,EAAI,GAAI,EAAA,EAAA,EAAG,EAAG,EAAA,GAAA,EAAI,GAAI,EAAA,EAAA,EAAG,EAAG,EAAA,GAAA,EAAI,GAAI,EAAA,EAAA,EAAG,EAAG,EAAA,GAAA,EAAI,GAAI,EAAA,EAAA,EAAG,EAAG,EAAA,GAAA,EAAI,GAAI,EAAA,EAAA,EAAG,EAAG,EAAA,GAAA,EAAI,GAAI,EAAA,EAAA,EAAG,EAAG,EAAA,GAAA,EAAI,GAAI,EAAA,EAAA,EAAG,EAAG,EAAA,GAAA,EAAI,GAAI,EAAA,EAAA,EAAG,EAAG,EAAA,GAAA,EAAI,GAAI,EAAA,EAAA,EAAG,EAAG,EAAA,GAAA,EAAI,GAAI,EAAA,EAAA,EAAG,CAAE,EAAA,GAAA,EAAI,GAAI,EAAA,EAAA,EAAG,CAAE,EAAA,GAAA,EAAI,GAAI,EAAA,EAAA,EAAG,CAAE,EAAA,GAAA,EAAI,GAAI,EAAA,EAAA,EAAG,CAAE,EAAA,GAAA,EAAI,GAAI,EAAA,EAAA,EAAG,CAAE,EAAA,GAAA,EAAI,GAAI,EAAA,EAAA,EAAG,CAAE,EAAA,GAAA,EAAI,GAAI,EAAA,EAAA,EAAG,CAAE,EAAA,GAAA,EAAI,GAAI,EAAA,EAAA,EAAG,CAAE,EAAA,GAAA,EAAI,GAAI,EAAA,EAAA,EAAG,GAAE,GAAI,EAAA,GAAA,EAAI,EAAG,EAAA,CAAA,EAAE,GAAI,EAAA,GAAA,EAAI,EAAG,EAAA,CAAA,EAAE,GAAI,EAAA,GAAA,EAAI,EAAG,EAAA,CAAA,EAAE,GAAI,EAAA,GAAA,EAAI,EAAG,EAAA,CAAA,EAAE,GAAI,EAAA,GAAA,EAAI,EAAG,EAAA,CAAA,EAAE,GAAI,EAAA,GAAA,EAAI,EAAG,EAAA,CAAA,EAAE,GAAI,EAAA,GAAA,EAAI,EAAG,EAAA,CAAA,EAAE,GAAI,EAAA,GAAA,EAAI,EAAG,EAAA,CAAA,EAAE,GAAI,EAAA,GAAA,EAAI,EAAG,EAAA,CAAA,EAAE,GAAI,EAAA,GAAA,EAAI,EAAG,EAAA,CAAA,EAAE,GAAI,EAAA,GAAA,EAAI,EAAG,EAAA,CAAA,EAAE,GAAI,EAAA,GAAA,EAAI,EAAG,EAAA,CAAA,EAAE,GAAI,EAAA,GAAA,EAAI,EAAG,EAAA,CAAA,EAAE,GAAI,EAAA,GAAA,EAAI,EAAG,EAAA,CAAA,EAAE,GAAI,EAAA,GAAA,EAAI,EAAG,EAAA,CAAA,EAAE,GAAI,EAAA,GAAA,EAA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EAAA,CAAA,EAAE,GAAI,EAAA,GAAA,EAAI,EAAG,EAAA,CAAA,EAAE,GAAI,EAAA,GAAA,EAAI,EAAG,EAAA,CAAA,EAAE,GAAI,EAAA,GAAA,EAAI,EAAG,EAAA,CAAA,EAAE,GAAI,EAAA,GAAA,EAAI,EAAG,EAAA,CAAA,EAAE,GAAI,EAAA,GAAA,EAAI,EAAG,EAAA,CAAA,EAAE,GAAI,EAAA,GAAA,EAAI,EAAG,EAAA,CAAA,EAAE,GAAI,EAAA,GAAA,EAAI,EAAG,EAAA,CAAA,EAAE,GAAI,EAAA,GAAA,EAAI,EAAG,EAAA,CAAA,EAAE,GAAI,EAAA,GAAA,EAAI,EAAG,EAAA,CAAA,EAAE,GAAI,EAAA,GAAA,EAAI,EAAG,EAAA,CAAA,EAAE,GAAI,EAAA,GAAA,EAAI,EAAG,EAAA,CAAA,EAAE,GAAI,EAAA,GAAA,EAAI,EAAG,EAAA,CAAA,EAAE,GAAI,EAAA,GAAA,EAAI,EAAG,EAAA,CAAA,EAAE,GAAI,EAAA,GAAA,EAAI,EAAG,EAAA,CAAA,EAAE,GAAI,EAAA,GAAA,EAAI,EAAG,EAAA,CAAA,EAAE,GAAI,EAAA,GAAA,EAAI,EAAG,EAAA,CAAA,EAAE,GAAI,EAAA,GAAA,EAAI,EAAG,EAAA,CAAA,EAAE,GAAI,EAAA,GAAA,EAAI,EAAG,EAAA,CAAA,EAAE,GAAI,EAAA,GAAA,EAAI,EAAG,EAAA,CAAA,EAAE,GAAI,EAAA,GAAA,EAAI,EAAG,EAAA,CAAA,EAAE,GAAI,EAAA,GAAA,EAAI,EAAG,EAAA,CAAA,EAAE,GAAI,EAAA,GAAA,EAAI,EAAG,EAAA,CAAA,EAAE,GAAI,EAAA,GAAA,EAAI,EAAG,EAAA,CAAA,EAAE,GAAI,EAAA,GAAA,EAAI,EAAG,EAAA,CAAA,EAAE,GAAI,EAAA,GAAA,EAAI,EAAG,EAAA,CAAA,EAAE,GAAI,EAAA,GAAA,EAAI,IAAG,CAAE,EAAA,GAAA,EAAI,GAAI,EAAA,EAAA,EAAG,CAAE,EAAA,GAAA,EAAI,GAAI,EAAA,EAAA,EAAG,CAAE,EAAA,GAAA,EAAI,GAAI,EAAA,EAAA,EAAG,CAAE,EAAA,GAAA,EAAI,GAAI,EAAA,EAAA,EAAG,CAAE,EAAA,GAAA,EAAI,GAAI,EAAA,EAAA,EAAG,CAAE,EAAA,GAAA,EAAI,GAAI,EAAA,EAAA,EAAG,CAAE,EAAA,GAAA,EAAI,GAAI,EAAA,EAAA,EAAG,CAAE,EAAA,GAAA,EAAI,GAAI,EAAA,EAAA,EAAG,CAAE,EAAA,GAAA,EAAI,GAAI,EAAA,EAAA,EAAG,CAAE,EAAA,GAAA,EAAI,GAAI,EAAA,EAAA,EAAG,CAAE,EAAA,GAAA,EAAI,GAAI,EAAA,EAAA,EAAG,CAAE,EAAA,GAAA,EAAI,GAAI,EAAA,EAAA,EAAG,CAAE,EAAA,GAAA,EAAI,GAAI,EAAA,EAAA,EAAG,CAAE,EAAA,GAAA,EAAI,GAAI,EAAA,EAAA,EAAG,CAAE,EAAA,GAAA,EAAI,GAAI,EAAA,EAAA,EAAG,CAAE,EAAA,GAAA,EAAI,GAAI,EAAA,EAAA,EAAG,CAAE,EAAA,GAAA,EAAI,GAAI,EAAA,GAAA,EAAI,CAAE,EAAA,GAAA,EAAI,GAAI,EAAA,GAAA,EAAI,CAAE,EAAA,GAAA,EAAI,GAAI,EAAA,GAAA,EAAI,CAAE,EAAA,GAAA,EAAI,GAAI,EAAA,GAAA,EAAI,CAAE,EAAA,GAAA,EAAI,GAAI,EAAA,GAAA,EAAI,CAAE,EAAA,GAAA,EAAI,GAAI,EAAA,GAAA,EAAI,CAAE,EAAA,GAAA,EAAI,GAAI,EAAA,GAAA,EAAI,CAAE,EAAA,GAAA,EAAI,GAAI,EAAA,GAAA,EAAI,CAAE,EAAA,GAAA,EAAI,GAAI,EAAA,GAAA,EAAI,CAAE,EAAA,GAAA,EAAI,GAAI,EAAA,GAAA,EAAI,CAAE,EAAA,GAAA,EAAI,GAAI,EAAA,GAAA,EAAI,CAAE,EAAA,GAAA,EAAI,GAAI,EAAA,GAAA,EAAI,CAAE,EAAA,GAAA,EAAI,GAAI,EAAA,GAAA,EAAI,CAAE,EAAA,GAAA,EAAI,GAAI,EAAA,GAAA,EAAI,CAAE,EAAA,GAAA,EAAI,GAAI,EAAA,GAAA,EAAI,CAAE,EAAA,GAAA,EAAI,GAAI,EAAA,GAAA,EAAI,GAAE,GAAI,EAAA,GAAA,EAAI,GAAI,EAAA,CAAA,EAAE,GAAI,EAAA,GAAA,EAAI,GAAI,EAAA,CAAA,EAAE,GAAI,EAAA,GAAA,EAAI,GAAI,EAAA,CAAA,EAAE,GAAI,EAAA,GAAA,EAAI,GAAI,EAAA,CAAA,EAAE,GAAI,EAAA,GAAA,EAAI,GAAI,EAAA,CAAA,EAAE,GAAI,EAAA,GAAA,EAAI,GAAI,EAAA,CAAA,EAAE,GAAI,EAAA,GAAA,EAAI,GAAI,EAAA,CAAA,EAAE,GAAI,EAAA,GAAA,EAAI,GAAI,EAAA,CAAA,EAAE,GAAI,EAAA,GAAA,EAAI,GAAI,EAAA,CAAA,EAAE,GAAI,EAAA,GAAA,EAAI,GAAI,EAAA,CAAA,EAAE,GAAI,EAAA,GAAA,EAAI,GAAI,EAAA,EAAA,EAAG,GAAI,EAAA,GAAA,EAAI,GAAI,EAAA,EAAA,EAAG,GAAI,EAAA,GAAA,EAAI,GAAI,EAAA,EAAA,EAAG,GAAI,EAAA,GAAA,EAAI,GAAI,EAAA,EAAA,EAAG,GAAI,EAAA,GAAA,EAAI,GAAI,EAAA,EAAA,EAAG,GAAI,EAAA,GAAA,EAAI,GAAI,EAAA,EAAA,EAAG,GAAI,EAAA,GAAA,EAAI,GAAI,EAAA,EAAA,EAAG,GAAI,EAAA,GAAA,EAAI,GAAI,EAAA,EAAA,EAAG,GAAI,EAAA,GAAA,EAAI,GAAI,EAAA,EAAA,EAAG,GAAI,EAAA,GAAA,EAAI,GAAI,EAAA,EAAA,EAAG,GAAI,EAAA,GAAA,EAAI,GAAI,EAAA,EAAA,EAAG,GAAI,EAAA,GAAA,EAAI,GAAI,EAAA,EAAA,EAAG,GAAI,EAAA,GAAA,EAAI,GAAI,EAAA,EAAA,EAAG,GAAI,EAAA,GAAA,EAAI,GAAI,EAAA,EAAA,EAAG,GAAI,EAAA,GAAA,EAAI,GAAI,EAAA,EAAA,EAAG,GAAI,EAAA,GAAA,EAAI,GAAI,EAAA,EAAA,EAAG,GAAI,EAAA,GAAA,EAAI,GAAI,EAAA,EAAA,EAAG,GAAI,EAAA,GAAA,EAAI,GAAI,EAAA,EAAA,EAAG,GAAI,EAAA,GAAA,EAAI,GAAI,EAAA,EAAA,EAAG,GAAI,EAAA,GAAA,EAAI,GAAI,EAAA,EAAA,EAAG,GAAI,EAAA,GAAA,EAAI,GAAI,EAAA,EAAA,EAAG,GAAI,EAAA,GAAA,EAAI,GAAI,EAAA,EAAA,EAAG,KAAI,GAAI,EAAA,GAAA,EAAI,EAAG,EAAA,GAAA,EAAI,GAAI,EAAA,GAAA,EAAI,EAAG,EAAA,GAAA,EAAI,GAAI,EAAA,GAAA,EAAI,EAAG,EAAA,GAAA,EAAI,GAAI,EAAA,GAAA,EAAI,EAAG,EAAA,GAAA,EAAI,GAAI,EAAA,GAAA,EAAI,EAAG,EAAA,GAAA,EAAI,GAAI,EAAA,GAAA,EAAI,EAAG,EAAA,GAAA,EAAI,GAAI,EAAA,GAAA,EAAI,EAAG,EAAA,GAAA,EAAI,GAAI,EAAA,GAAA,EAAI,EAAG,EAAA,GAAA,EAAI,GAAI,EAAA,GAAA,EAAI,EAAG,EAAA,GAAA,EAAI,GAAI,EAAA,GAAA,EAAI,EAAG,EAAA,GAAA,EAAI,GAAI,EAAA,GAAA,EAAI,EAAG,EAAA,GAAA,EAAI,GAAI,EAAA,GAAA,EAAI,EAAG,EAAA,GAAA,EAAI,GAAI,EAAA,GAAA,EAAI,EAAG,EAAA,GAAA,EAAI,GAAI,EAAA,GAAA,EAAI,EAAG,EAAA,GAAA,EAAI,GAAI,EAAA,GAAA,EAAI,EAAG,EAAA,GAAA,EAAI,GAAI,EAAA,GAAA,EAAI,EAAG,EAAA,GAAA,EAAI,GAAI,EAAA,GAAA,EAAI,EAAG,EAAA,GAAA,EAAI,GAAI,EAAA,GAAA,EAAI,EAAG,EAAA,GAAA,EAAI,GAAI,EAAA,GAAA,EAAI,EAAG,EAAA,GAAA,EAAI,GAAI,EAAA,GAAA,EAAI,EAAG,EAAA,GAAA,EAAI,GAAI,EAAA,GAAA,EAAI,EAAG,EAAA,GAAA,EAAI,GAAI,EAAA,GAAA,EAAI,EAAG,EAAA,GAAA,EAAI,GAAI,EAAA,GAAA,EAAI,EAAG,EAAA,GAAA,EAAI,GAAI,EAAA,GAAA,EAAI,EAAG,EAAA,GAAA,EAAI,GAAI,EAAA,GAAA,EAAI,EAAG,EAAA,GAAA,EAAI,GAAI,EAAA,GAAA,EAAI,EAAG,EAAA,GAAA,EAAI,GAAI,EAAA,GAAA,EAAI,EAAG,EAAA,GAAA,EAAI,GAAI,EAAA,GAAA,EAAI,EAAG,EAAA,GAAA,EAAI,GAAI,EAAA,GAAA,EAAI,EAAG,EAAA,GAAA,EAAI,GAAI,EAAA,GAAA,EAAI,EAAG,EAAA,GAAA,EAAI,GAAI,EAAA,GAAA,EAAI,EAAG,EAAA,GAAA,EAAI,GAAI,EAAA,GAAA,EAAI,EAAG,EAAA,GAAA,EAAI,KAAI,GAAI,EAAA,EAAA,EAAG,GAAI,EAAA,GAAA,EAAI,GAAI,EAAA,EAAA,EAAG,GAAI,EAAA,GAAA,EAAI,GAAI,EAAA,EAAA,EAAG,GAAI,EAAA,GAAA,EAAI,GAAI,EAAA,EAAA,EAAG,GAAI,EAAA,GAAA,EAAI,GAAI,EAAA,EAAA,EAAG,GAAI,EAAA,GAAA,EAAI,GAAI,EAAA,EAAA,EAAG,GAAI,EAAA,GAAA,EAAI,GAAI,EAAA,EAAA,EAAG,GAAI,EAAA,GAAA,EAAI,GAAI,EAAA,EAAA,EAAG,GAAI,EAAA,GAAA,EAAI,GAAI,EAAA,EAAA,EAAG,GAAI,EAAA,GAAA,EAAI,GAAI,EAAA,EAAA,EAAG,GAAI,EAAA,GAAA,EAAI,GAAI,EAAA,EAAA,EAAG,GAAI,EAAA,GAAA,EAAI,GAAI,EAAA,EAAA,EAAG,GAAI,EAAA,GAAA,EAAI,GAAI,EAAA,EAAA,EAAG,GAAI,EAAA,GAAA,EAAI,GAAI,EAAA,EAAA,EAAG,GAAI,EAAA,GAAA,EAAI,GAAI,EAAA,EAAA,EAAG,GAAI,EAAA,GAAA,EAAI,GAAI,EAAA,EAAA,EAAG,GAAI,EAAA,GAAA,EAAI,GAAI,EAAA,EAAA,EAAG,GAAI,EAAA,GAAA,EAAI,GAAI,EAAA,EAAA,EAAG,GAAI,EAAA,GAAA,EAAI,GAAI,EAAA,EAAA,EAAG,GAAI,EAAA,GAAA,EAAI,GAAI,EAAA,EAAA,EAAG,GAAI,EAAA,GAAA,EAAI,GAAI,EAAA,EAAA,EAAG,GAAI,EAAA,GAAA,EAAI,GAAI,EAAA,EAAA,EAAG,GAAI,EAAA,GAAA,EAAI,GAAI,EAAA,EAAA,EAAG,GAAI,EAAA,GAAA,EAAI,GAAI,EAAA,EAAA,EAAG,GAAI,EAAA,GAAA,EAAI,GAAI,EAAA,EAAA,EAAG,EAAG,EAAA,GAAA,EAAI,GAAI,EAAA,EAAA,EAAG,EAAG,EAAA,GAAA,EAAI,GAAI,EAAA,GAAA,EAAI,EAAG,EAAA,GAAA,EAAI,GAAI,EAAA,GAAA,EAAI,EAAG,EAAA,GAAA,EAAI,GAAI,EAAA,GAAA,EAAI,EAAG,EAAA,GAAA,EAAI,GAAI,EAAA,GAAA,EAAI,EAAG,EAAA,GAAA,EAAI,GAAI,EAAA,GAAA,EAAI,EAAG,EAAA,GAAA,EAAI,GAAI,EAAA,GAAA,EAAI,EAAG,EAAA,GAAA,EAAI,KAAI,GAAI,EAAA,EAAA,EAAG,GAAI,EAAA,GAAA,EAAI,GAAI,EAAA,EAAA,EAAG,GAAI,EAAA,GAAA,EAAI,GAAI,EAAA,EAAA,EAAG,GAAI,EAAA,GAAA,EAAI,GAAI,EAAA,EAAA,EAAG,GAAI,EAAA,GAAA,EAAI,GAAI,EAAA,EAAA,EAAG,GAAI,EAAA,GAAA,EAAI,GAAI,EAAA,EAAA,EAAG,GAAI,EAAA,GAAA,EAAI,GAAI,EAAA,EAAA,EAAG,GAAI,EAAA,GAAA,EAAI,GAAI,EAAA,EAAA,EAAG,GAAI,EAAA,GAAA,EAAI,GAAI,EAAA,EAAA,EAAG,GAAI,EAAA,GAAA,EAAI,GAAI,EAAA,EAAA,EAAG,GAAI,EAAA,GAAA,EAAI,GAAI,EAAA,EAAA,EAAG,GAAI,EAAA,GAAA,EAAI,GAAI,EAAA,EAAA,EAAG,GAAI,EAAA,GAAA,EAAI,GAAI,EAAA,EAAA,EAAG,GAAI,EAAA,GAAA,EAAI,GAAI,EAAA,EAAA,EAAG,GAAI,EAAA,GAAA,EAAI,GAAI,EAAA,EAAA,EAAG,GAAI,EAAA,GAAA,EAAI,GAAI,EAAA,EAAA,EAAG,GAAI,EAAA,GAAA,EAAI,GAAI,EAAA,EAAA,EAAG,GAAI,EAAA,GAAA,EAAI,GAAI,EAAA,EAAA,EAAG,GAAI,EAAA,GAAA,EAAI,GAAI,EAAA,EAAA,EAAG,GAAI,EAAA,GAAA,EAAI,GAAI,EAAA,EAAA,EAAG,GAAI,EAAA,GAAA,EAAI,GAAI,EAAA,EAAA,EAAG,GAAI,EAAA,GAAA,EAAI,GAAI,EAAA,EAAA,EAAG,GAAI,EAAA,GAAA,EAAI,GAAI,EAAA,EAAA,EAAG,GAAI,EAAA,GAAA,EAAI,GAAI,EAAA,EAAA,EAAG,GAAI,EAAA,GAAA,EAAI,GAAI,EAAA,EAAA,EAAG,GAAI,EAAA,GAAA,EAAI,GAAI,EAAA,EAAA,EAAG,GAAI,EAAA,GAAA,EAAI,GAAI,EAAA,EAAA,EAAG,GAAI,EAAA,GAAA,EAAI,GAAI,EAAA,EAAA,EAAG,GAAI,EAAA,GAAA,EAAI,GAAI,EAAA,EAAA,EAAG,GAAI,EAAA,GAAA,EAAI,GAAI,EAAA,EAAA,EAAG,GAAI,EAAA,GAAA,EAAI,GAAI,EAAA,EAAA,EAAG,GAAI,EAAA,GAAA,EAAI,GAAI,EAAA,EAAA,EAAG,GAAI,EAAA,GAAA,EAAI,KAAI,EAAG,EAAA,GAAA,EAAI,GAAI,EAAA,GAAA,EAAI,EAAG,EAAA,GAAA,EAAI,GAAI,EAAA,GAAA,EAAI,EAAG,EAAA,GAAA,EAAI,GAAI,EAAA,GAAA,EAAI,EAAG,EAAA,GAAA,EAAI,GAAI,EAAA,GAAA,EAAI,EAAG,EAAA,GAAA,EAAI,GAAI,EAAA,GAAA,EAAI,EAAG,EAAA,GAAA,EAAI,GAAI,EAAA,GAAA,EAAI,EAAG,EAAA,GAAA,EAAI,GAAI,EAAA,GAAA,EAAI,EAAG,EAAA,GAAA,EAAI,GAAI,EAAA,GAAA,EAAI,EAAG,EAAA,GAAA,EAAI,GAAI,EAAA,GAAA,EAAI,EAAG,EAAA,GAAA,EAAI,GAAI,EAAA,GAAA,EAAI,EAAG,EAAA,GAAA,EAAI,GAAI,EAAA,GAAA,EAAI,EAAG,EAAA,GAAA,EAAI,GAAI,EAAA,GAAA,EAAI,EAAG,EAAA,GAAA,EAAI,GAAI,EAAA,GAAA,EAAI,EAAG,EAAA,GAAA,EAAI,GAAI,EAAA,GAAA,EAAI,EAAG,EAAA,GAAA,EAAI,GAAI,EAAA,GAAA,EAAI,EAAG,EAAA,GAAA,EAAI,GAAI,EAAA,GAAA,EAAI,EAAG,EAAA,GAAA,EAAI,GAAI,EAAA,GAAA,EAAI,EAAG,EAAA,GAAA,EAAI,GAAI,EAAA,GAAA,EAAI,EAAG,EAAA,GAAA,EAAI,GAAI,EAAA,GAAA,EAAI,EAAG,EAAA,GAAA,EAAI,GAAI,EAAA,GAAA,EAAI,EAAG,EAAA,GAAA,EAAI,GAAI,EAAA,GAAA,EAAI,EAAG,EAAA,GAAA,EAAI,GAAI,EAAA,GAAA,EAAI,EAAG,EAAA,GAAA,EAAI,GAAI,EAAA,GAAA,EAAI,EAAG,EAAA,GAAA,EAAI,GAAI,EAAA,GAAA,EAAI,EAAG,EAAA,GAAA,EAAI,GAAI,EAAA,GAAA,EAAI,EAAG,EAAA,GAAA,EAAI,GAAI,EAAA,GAAA,EAAI,EAAG,EAAA,GAAA,EAAI,GAAI,EAAA,GAAA,EAAI,EAAG,EAAA,GAAA,EAAI,GAAI,EAAA,GAAA,EAAI,EAAG,EAAA,GAAA,EAAI,GAAI,EAAA,GAAA,EAAI,EAAG,EAAA,GAAA,EAAI,GAAI,EAAA,GAAA,EAAI,EAAG,EAAA,GAAA,EAAI,GAAI,EAAA,GAAA,EAAI,EAAG,EAAA,GAAA,EAAI,GAAI,EAAA,GAAA,EAAI,IAAG,GAAI,EAAA,GAAA,EAAI,GAAI,EAAA,EAAA,EAAG,GAAI,EAAA,GAAA,EAAI,GAAI,EAAA,EAAA,EAAG,GAAI,EAAA,GAAA,EAAI,GAAI,EAAA,EAAA,EAAG,GAAI,EAAA,GAAA,EAAI,GAAI,EAAA,EAAA,EAAG,GAAI,EAAA,GAAA,EAAI,GAAI,EAAA,EAAA,EAAG,GAAI,EAAA,GAAA,EAAI,GAAI,EAAA,EAAA,EAAG,GAAI,EAAA,GAAA,EAAI,GAAI,EAAA,EAAA,EAAG,GAAI,EAAA,GAAA,EAAI,GAAI,EAAA,EAAA,EAAG,GAAI,EAAA,GAAA,EAAI,GAAI,EAAA,EAAA,EAAG,GAAI,EAAA,GAAA,EAAI,GAAI,EAAA,EAAA,EAAG,GAAI,EAAA,GAAA,EAAI,GAAI,EAAA,EAAA,EAAG,GAAI,EAAA,GAAA,EAAI,GAAI,EAAA,EAAA,EAAG,GAAI,EAAA,GAAA,EAAI,GAAI,EAAA,EAAA,EAAG,GAAI,EAAA,GAAA,EAAI,GAAI,EAAA,EAAA,EAAG,GAAI,EAAA,GAAA,EAAI,GAAI,EAAA,EAAA,EAAG,GAAI,EAAA,GAAA,EAAI,GAAI,EAAA,EAAA,EAAG,GAAI,EAAA,GAAA,EAAI,GAAI,EAAA,EAAA,EAAG,GAAI,EAAA,GAAA,EAAI,GAAI,EAAA,EAAA,EAAG,GAAI,EAAA,GAAA,EAAI,GAAI,EAAA,EAAA,EAAG,GAAI,EAAA,GAAA,EAAI,GAAI,EAAA,EAAA,EAAG,GAAI,EAAA,GAAA,EAAI,GAAI,EAAA,EAAA,EAAG,GAAI,EAAA,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"}